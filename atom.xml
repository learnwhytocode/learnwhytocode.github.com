<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learn Why to Code]]></title>
  <link href="http://learnwhytocode.github.com/atom.xml" rel="self"/>
  <link href="http://learnwhytocode.github.com/"/>
  <updated>2012-09-20T08:16:36-04:00</updated>
  <id>http://learnwhytocode.github.com/</id>
  <author>
    <name><![CDATA[Dan Nguyen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Now Learn How]]></title>
    <link href="http://learnwhytocode.github.com/lessons/now-learn-how/"/>
    <updated>2012-12-30T00:00:00-05:00</updated>
    <id>http://learnwhytocode.github.com/lessons/now-learn-how</id>
    <content type="html"><![CDATA[<hr />

<p>layout: post
title: &#8220;Now learn how&#8221;
date: 2012-09-12 12:30
comments: true
categories:
problem: &#8220;What now?&#8221;
solution: &#8220;Once you&#8217;ve learned why programming is important for real-world analysis and tasks, you just have to learn how to do it better.&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mash more mashup]]></title>
    <link href="http://learnwhytocode.github.com/lessons/mash-more-mashup/"/>
    <updated>2012-09-12T06:30:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/mash-more-mashup</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make a web mashup]]></title>
    <link href="http://learnwhytocode.github.com/lessons/make-a-mashup/"/>
    <updated>2012-09-12T06:20:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/make-a-mashup</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Which websites do Congressmembers tweet about?]]></title>
    <link href="http://learnwhytocode.github.com/lessons/make-our-own-data/"/>
    <updated>2012-09-12T06:17:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/make-our-own-data</id>
    <content type="html"><![CDATA[<p>Perhaps the greatest power that programming gives is the ability to create your own data source.</p>

<p>We&#8217;ve already been doing this all along, of course.</p>

<h2>Which links are most tweeted?</h2>

<h2>What are the short links?</h2>

<h2>Build our own link-finder</h2>

<h2>Build our own short-link database</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Judging tweets by their text]]></title>
    <link href="http://learnwhytocode.github.com/lessons/judging-tweets-by-their-text/"/>
    <updated>2012-09-12T06:15:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/judging-tweets-by-their-text</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flexible and fast data analysis]]></title>
    <link href="http://learnwhytocode.github.com/lessons/flexible-analysis/"/>
    <updated>2012-09-12T06:10:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/flexible-analysis</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making spreadsheets]]></title>
    <link href="http://learnwhytocode.github.com/lessons/data-printing/"/>
    <updated>2012-09-12T06:05:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/data-printing</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filter a collection]]></title>
    <link href="http://learnwhytocode.github.com/lessons/filtering-a-list/"/>
    <updated>2012-09-12T04:02:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/filtering-a-list</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading from a spreadsheet-like file]]></title>
    <link href="http://learnwhytocode.github.com/lessons/reading-a-CSV/"/>
    <updated>2012-09-12T03:20:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/reading-a-CSV</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching data locations]]></title>
    <link href="http://learnwhytocode.github.com/lessons/moving-data-sources/"/>
    <updated>2012-09-12T03:18:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/moving-data-sources</id>
    <content type="html"><![CDATA[<p>As I said at the outset, we&#8217;re working with a very small sample of Twitter&#8217;s data, and we&#8217;re not using its official API.</p>

<p>At some point, you&#8217;re going to want to remove the training wheels and get data straight from the source.</p>

<p>We won&#8217;t get to that in this tutorial, but we&#8217;ll go through the motions. I&#8217;m going to change up the data source and show you how our <strong>my_code.rb</strong> can adapt to it.</p>

<h2>More data, more problems</h2>

<p>Good news. Instead of just looking at the same 10 congressmembers over and over, I have a data file of roughly 500 U.S. politicians.</p>

<p>But rather than have you hit up my server repeatedly, I&#8217;m just going to give you the data in bulk. This will make things much faster for you, as you won&#8217;t have the latency of an Internet connection: you&#8217;ll be combing through the data as it sits on your hard drive.</p>

<p>The bad news is that you&#8217;re going to have to adapt.</p>

<h3>Download the data</h3>

<p>The full dataset (which is not even quite complete, but more on that later) is more than 300MB. You can download it <a href="TK">here TK</a>. If you have a fast computer, sure, go for it.</p>

<p>However, because we&#8217;re still just practicing, there&#8217;s not really a need to process tens of thousands of tweets. So here&#8217;s a subset, about TK MB: <a href="TK">TK</a>. It contains the same number of Twitter accounts to process, just fewer tweets.</p>

<p>The best place to store this data is as a <strong>sub-directory</strong> in your <strong>working directory</strong>.</p>

<p>I&#8217;m going to assume you&#8217;re naming it <strong>data-hold</strong>.</p>

<p>So unzip the data-file into <strong>data-hold</strong>, and it should create some familiar sub-directories, including <strong>users</strong> and <strong>statuses</strong></p>

<h2>Making adjustments</h2>

<p>Let&#8217;s look at the current state of our <strong>my_code.rb</strong> file:</p>

<figure class='code'><figcaption><span>Our common code (my_code.rb)</span> <a href='http://learnwhytocode.github.com/downloads/code/wrapper-methods/my_code.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">###############</span>
</span><span class='line'><span class="c1"># Constants</span>
</span><span class='line'><span class="no">TWITTER_DATA_HOST</span> <span class="o">=</span> <span class="s2">&quot;http://nottwitter.danwin.com&quot;</span>
</span><span class='line'><span class="no">TWITTER_USER_DATA_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_DATA_HOST</span><span class="p">,</span> <span class="s2">&quot;users&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">TWITTER_TWEETS_DATA_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_DATA_HOST</span><span class="p">,</span> <span class="s2">&quot;statuses&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">url_for_twitter_user_info</span><span class="p">(</span><span class="n">screen_name</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># pre: screen_name a Twitter account name as a string</span>
</span><span class='line'>  <span class="c1"># returns: url (string) to get user data</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_USER_DATA_PATH</span><span class="p">,</span> <span class="n">screen_name</span><span class="p">,</span> <span class="s1">&#39;show.json&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">url_for_tweets_page</span><span class="p">(</span><span class="n">screen_name</span><span class="p">,</span> <span class="n">pg_num</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># pre: screen_name is a Twitter account name, as a string; pg_num</span>
</span><span class='line'>  <span class="c1">#      the page number, as tweets are separated into numbered pages</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># returns: url (string) to get tweets</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_TWEETS_DATA_PATH</span><span class="p">,</span> <span class="n">screen_name</span><span class="p">,</span> <span class="n">pg_num</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s2">&quot;user_timeline.json&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_data_file</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># pre: u is a URL string</span>
</span><span class='line'>  <span class="c1"># post: downloads from u; has no protection against bad URLs</span>
</span><span class='line'>  <span class="c1"># i.e. this will have to be modified later</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_twitter_user</span><span class="p">(</span><span class="n">screen_name</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># pre: screen_name is a Twitter account name, as a string</span>
</span><span class='line'>  <span class="c1"># returns: user info as a Hash object</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">d</span> <span class="o">=</span> <span class="n">get_data_file</span><span class="p">(</span> <span class="n">url_for_twitter_user_info</span><span class="p">(</span><span class="n">screen_name</span><span class="p">))</span>
</span><span class='line'>  <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_tweets_page</span><span class="p">(</span><span class="n">screen_name</span><span class="p">,</span> <span class="n">pg_num</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># pre: screen_name is a Twitter account name, as a string; pg_num</span>
</span><span class='line'>  <span class="c1">#      the page number, as tweets are separated into numbered pages</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># returns: an array of tweet Hash objects</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">d</span> <span class="o">=</span> <span class="n">get_data_file</span><span class="p">(</span> <span class="n">url_for_tweets_page</span><span class="p">(</span><span class="n">screen_name</span><span class="p">,</span> <span class="n">pg_num</span><span class="p">))</span>
</span><span class='line'>  <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Done loading my code!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The most obvious adjustment is to change the value of the <code>TWITTER_DATA_HOST</code> to the <strong>data-hold</strong> sub-directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">TWITTER_DATA_HOST</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;data-hold&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>(try out the <code>File.expand_path</code> method in <strong>irb</strong> to see what it does)</p>

<h3>Well-laid plans</h3>

<p>With that simple change, we are <em>almost</em> done with the needed adjustments.</p>

<p>This is because we wisely created the <code>url_for</code> methods to rely on the <code>TWITTER_USER_DATA_PATH</code> and <code>TWITTER_TWEETS_DATA_PATH</code> constants.</p>

<p>And what do those constants depend on? The value of <code>TWITTER_DATA_HOST</code>, since the user and tweets data paths are merely sub-directories of the base location.</p>

<p>Pretty nifty.</p>

<h2>A different get method</h2>

<p>Unfortunately, there is one major change to make.</p>

<p>Retrieving a file from the Internet is not exactly the same as getting it from your own hard drive. For starters, <code>HTTParty</code> won&#8217;t work.</p>

<p>Instead, we use the <code>File.open</code> (part of Ruby&#8217;s core library), which acts a bit differently:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some_filename</span> <span class="o">=</span> <span class="n">url_for_twitter_user_info</span><span class="p">(</span><span class="s1">&#39;NancyPelosi&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">fh</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">some_filename</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">fbody</span> <span class="o">=</span> <span class="n">fh</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="n">fh</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ...parse fbody</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Exercise</h2>

<p>Make the necessary changes to <strong>my_code.rb</strong> to adapt to the change in data source.</p>

<figure class='code'><figcaption><span>Our common code for local data (my_code_alpha.rb)</span> <a href='http://learnwhytocode.github.com/downloads/code/local-data-env/my_code_alpha.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">###############</span>
</span><span class='line'><span class="c1"># Constants</span>
</span><span class='line'><span class="no">TWITTER_DATA_HOST</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;data-hold&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">TWITTER_USER_DATA_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_DATA_HOST</span><span class="p">,</span> <span class="s2">&quot;users&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">TWITTER_TWEETS_DATA_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_DATA_HOST</span><span class="p">,</span> <span class="s2">&quot;statuses&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">url_for_twitter_user_info</span><span class="p">(</span><span class="n">screen_name</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># pre: screen_name a Twitter account name as a string</span>
</span><span class='line'>  <span class="c1"># returns: url (string) to get user data</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_USER_DATA_PATH</span><span class="p">,</span> <span class="n">screen_name</span><span class="p">,</span> <span class="s1">&#39;show.json&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">url_for_tweets_page</span><span class="p">(</span><span class="n">screen_name</span><span class="p">,</span> <span class="n">pg_num</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># pre: screen_name is a Twitter account name, as a string; pg_num</span>
</span><span class='line'>  <span class="c1">#      the page number, as tweets are separated into numbered pages</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># returns: url (string) to get tweets</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_TWEETS_DATA_PATH</span><span class="p">,</span> <span class="n">screen_name</span><span class="p">,</span> <span class="n">pg_num</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s2">&quot;user_timeline.json&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_data_file</span><span class="p">(</span><span class="n">fname</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># note: modified for local data access</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># pre: fname is a filename string (not a URL anymore)</span>
</span><span class='line'>  <span class="c1"># returns: opens the file at the given fname and returns the data read.</span>
</span><span class='line'>  <span class="c1">#  it also closes the file after reading it</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># warning: this will crash if file does not exist</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fstream</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">fbody</span> <span class="o">=</span> <span class="n">fstream</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>  <span class="n">fstream</span><span class="o">.</span><span class="n">close</span>  <span class="c1"># just something we have to do</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">fbody</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_twitter_user</span><span class="p">(</span><span class="n">screen_name</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># pre: screen_name is a Twitter account name, as a string</span>
</span><span class='line'>  <span class="c1"># returns: user info as a Hash object</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">d</span> <span class="o">=</span> <span class="n">get_data_file</span><span class="p">(</span> <span class="n">url_for_twitter_user_info</span><span class="p">(</span><span class="n">screen_name</span><span class="p">))</span>
</span><span class='line'>  <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_tweets_page</span><span class="p">(</span><span class="n">screen_name</span><span class="p">,</span> <span class="n">pg_num</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># pre: screen_name is a Twitter account name, as a string; pg_num</span>
</span><span class='line'>  <span class="c1">#      the page number, as tweets are separated into numbered pages</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># returns: an array of tweet Hash objects</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">d</span> <span class="o">=</span> <span class="n">get_data_file</span><span class="p">(</span> <span class="n">url_for_tweets_page</span><span class="p">(</span><span class="n">screen_name</span><span class="p">,</span> <span class="n">pg_num</span><span class="p">))</span>
</span><span class='line'>  <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Done loading my code!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this modified <strong>my_code.rb</strong>, test it out on your local data store. Things should seem pretty much the same.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">load</span> <span class="sb">`./my_code.rb`</span>
</span><span class='line'>
</span><span class='line'><span class="n">t_user</span> <span class="o">=</span> <span class="n">get_twitter_user</span><span class="p">(</span><span class="s1">&#39;DarellIssaTK&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">t_user</span><span class="o">[</span><span class="s1">&#39;followers_count&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I guess we could change the names of the <code>url_for</code> methods&#8230;since they don&#8217;t actually refer to web addresses. But that&#8217;s the beauty of abstraction: we don&#8217;t need to worry about such details as long as things work as expected.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[File existence and other considerations]]></title>
    <link href="http://learnwhytocode.github.com/lessons/file-existence-and-other-tests/"/>
    <updated>2012-09-12T03:18:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/file-existence-and-other-tests</id>
    <content type="html"><![CDATA[<p>When we were retrieving data online, I carefully avoided the task of fetching more than one page of tweets per user.</p>

<p>This is because, for the sake of brevity, I didn&#8217;t want to explain the many different ways a web server could respond to a request for an invalid file.</p>

<p>But now that the files are all on our hard drive, this is an easier problem to deal in the abstract.</p>

<p>This chapter will be a refresher on the <code>if</code> statement</p>

<h2>File.exists?</h2>

<p>The <code>File</code> class (again, part of Ruby&#8217;s core) has a handy <code>exists?</code> method, which returns <code>true</code> or <code>false</code> if a file actually exists at a given filename:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;somenameimadeup.txt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>Note:</strong> You may be wondering, <em>how does a method name have a question mark? I thought only alphanumeric characters could be used?</em> Yes, generally&#8230;this is a Ruby-specific convention. You have the option of using the <code>?</code> to indicate to users that this method returns <code>true</code> or <code>false</code>, though it&#8217;s just a convention&#8230;you could be a jerk and return whatever you want. Also, the <code>!</code> is allowed in method names. I won&#8217;t explain that right now.</p>

<h2>How to loop through numbers?</h2>

<p>The pattern for tweet pages is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">url_for_tweets_page</span><span class="p">(</span><span class="s1">&#39;NancyPelosi&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;data-hold/statuses/NancyPelosi/1/user_timeline.json&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">url_for_tweets_page</span><span class="p">(</span><span class="s1">&#39;NancyPelosi&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;data-hold/statuses/NancyPelosi/2/user_timeline.json&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">url_for_tweets_page</span><span class="p">(</span><span class="s1">&#39;NancyPelosi&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;data-hold/statuses/NancyPelosi/2/user_timeline.json&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we just need to change the argument corresponding to the page number. So how to do a loop from <code>1</code> to <code>5</code>? You could think of it as looping through an <code>Array</code> of numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">url_for_tweets_page</span><span class="p">(</span><span class="s1">&#39;NancyPelosi&#39;</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Ugh, but who wants to enter each number into the array? Luckily, Ruby has another collection object called <code>Range</code>. Here&#8217;s one way it can be used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pg_num</span><span class="o">|</span>
</span><span class='line'>  <span class="n">url_for_tweets_page</span><span class="p">(</span><span class="s1">&#39;NancyPelosi&#39;</span><span class="p">,</span> <span class="n">pg_num</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The else</h2>

<p>So it&#8217;s easy to set a <code>Range</code> from <code>1</code> to whatever number we need. But what if there are fewer tweet pages than the endpoint of our range?</p>

<p>Sounds like a use case for <code>File.exists?</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pg_num</span><span class="o">|</span>
</span><span class='line'>  <span class="n">fname</span> <span class="o">=</span> <span class="n">url_for_tweets_page</span><span class="p">(</span><span class="s1">&#39;NancyPelosi&#39;</span><span class="p">,</span> <span class="n">pg_num</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">fname</span><span class="p">))</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;The page &quot;</span> <span class="o">+</span> <span class="n">pg_num</span><span class="o">.</span><span class="n">to_s</span> <span class="s2">&quot; does not exist&quot;</span>
</span><span class='line'>  <span class="k">end</span>  
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>FYI, that exclamation mark <code>!</code> serves to <strong>negate</strong> the expression. So in the above case, if <code>File.exists?</code> returns <code>false</code> &ndash; because the file doesn&#8217;t exist &ndash; the <code>!</code> makes it <code>true</code>, causing the <code>if</code> branch to execute.</p>

<p>That&#8217;s admittedly confusing. So instead, we can use the <code>else</code> statement which allows us to define what happens when the <code>if</code> condition fails:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pg_num</span><span class="o">|</span>
</span><span class='line'>  <span class="n">fname</span> <span class="o">=</span> <span class="n">url_for_tweets_page</span><span class="p">(</span><span class="s1">&#39;NancyPelosi&#39;</span><span class="p">,</span> <span class="n">pg_num</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">fname</span><span class="p">))</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;The page &quot;</span> <span class="o">+</span> <span class="n">pg_num</span><span class="o">.</span><span class="n">to_s</span> <span class="s2">&quot; exists&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;The page &quot;</span> <span class="o">+</span> <span class="n">pg_num</span><span class="o">.</span><span class="n">to_s</span> <span class="s2">&quot; does not exist&quot;</span>
</span><span class='line'>  <span class="k">end</span>  
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Break a loop</h2>

<p>It seems wasteful to continue a loop if we know the condition is going to be false after the first non-existent file is found.</p>

<p>The <code>break</code> keyword allows us to break out of the current loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pg_num</span><span class="o">|</span>
</span><span class='line'>  <span class="n">fname</span> <span class="o">=</span> <span class="n">url_for_tweets_page</span><span class="p">(</span><span class="s1">&#39;NancyPelosi&#39;</span><span class="p">,</span> <span class="n">pg_num</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">fname</span><span class="p">))</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;The page &quot;</span> <span class="o">+</span> <span class="n">pg_num</span><span class="o">.</span><span class="n">to_s</span> <span class="s2">&quot; exists&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;The page &quot;</span> <span class="o">+</span> <span class="n">pg_num</span><span class="o">.</span><span class="n">to_s</span> <span class="s2">&quot; does not exist&quot;</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="k">end</span>  
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A more careful data-getting method</h2>

<p>We could test for file existence in a lot of places in a program. One place where it seems logical is in our <code>get_data_file</code> method, which currently will crash the program if an invalid file name is passed in.</p>

<p>Try to modify it so that it returns <code>false</code> if the given filename does not exist:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">get_data_file</span><span class="p">(</span><span class="n">fname</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">fname</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fstream</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fbody</span> <span class="o">=</span> <span class="n">fstream</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>      <span class="n">fstream</span><span class="o">.</span><span class="n">close</span>  <span class="c1"># just something we have to do</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">fbody</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This is actually problematic because <code>get_twitter_user</code> and <code>get_tweets_page</code> depends on <code>get_data_file</code>. And they need to be modified to deal with a returned <code>false</code> value.</p>

<p>Sound like a dilemma? Welcome to the joy of professional programming.</p>

<p>For now, I vote to <em>not</em> modify <code>get_data_file</code> to have this logic. This will affect the answer to the exercise below.</p>

<h2>Exercise</h2>

<p>We now know enough to collect all the tweet pages (on our hard drive) for a given user. Use the existing <code>get_tweets_page</code> method, write a new method called <code>get_all_user_tweets</code>.</p>

<ol>
<li>It should only take in one argument</li>
<li>It should not loop wastefully once the last page has been reached</li>
<li>It should return an array containing all the tweets collected across the pages.</li>
</ol>


<p>FYI, this is how you add two arrays together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr_a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="n">arr_b</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr_a</span> <span class="o">+</span> <span class="n">arr_b</span>
</span><span class='line'><span class="c1">#=&gt; [1, 2, 3, 4, 1, 2, 3, 4]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing more wrappers]]></title>
    <link href="http://learnwhytocode.github.com/lessons/writing-wrapper-methods/"/>
    <updated>2012-09-12T03:15:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/writing-wrapper-methods</id>
    <content type="html"><![CDATA[<p>Let&#8217;s build off of the <strong>my_code.rb</strong> file we made in the last chapter:</p>

<figure class='code'><figcaption><span>Our common code (my_code.rb)</span> <a href='http://learnwhytocode.github.com/downloads/code/organizing-the-code/my_code.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">###############</span>
</span><span class='line'><span class="c1"># Constants</span>
</span><span class='line'><span class="no">TWITTER_DATA_HOST</span> <span class="o">=</span> <span class="s2">&quot;http://nottwitter.danwin.com&quot;</span>
</span><span class='line'><span class="no">TWITTER_USER_DATA_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_DATA_HOST</span><span class="p">,</span> <span class="s2">&quot;users&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">TWITTER_TWEETS_DATA_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_DATA_HOST</span><span class="p">,</span> <span class="s2">&quot;statuses&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Done loading my code!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s been kind of annoying to re-formulate the URL for getting tweets and user info. So let&#8217;s use those constants to write methods to conveniently generate the needed URLs.</p>

<p>(this is just practice with no new concepts)</p>

<h2>Exercise</h2>

<h4>Form the URL pattern for Twitter account info</h4>

<p>Use the two constants we have in <strong>my_code.rb</strong> to build out a URL. You may want to use the <code>File.join</code> method</p>

<p>e.g. <code>http://nottwitter.danwin.com/users/NancyPelosi/show.json</code></p>

<p>Call it: &#8220;</p>

<h4>Form the URL pattern for a page of a user&#8217;s tweets</h4>

<p>Same as above, except for a page of tweets</p>

<p>e.g. <code>http://nottwitter.danwin.com/statuses/NancyPelosi/1/user_timeline.json</code></p>

<p>Call it: &#8220;</p>

<h4>Downloading from a URL</h4>

<p>This method downloads from a URL (yes, this may very well be a one-liner)</p>

<h4>Getting a Twitter user account data as a Hash</h4>

<p>Given an account name, this returns account data as a Hash</p>

<h4>Getting a Twitter user&#8217;s page of tweets as an Array</h4>

<p>Given an account name and page number, this returns tweet hashes as an Array.</p>

<h3>Answer</h3>

<p>Your <strong>my_code.rb</strong> should look like this:</p>

<figure class='code'><figcaption><span>Our common code redone (my_code.rb)</span> <a href='http://learnwhytocode.github.com/downloads/code/wrapper-methods/my_code.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">###############</span>
</span><span class='line'><span class="c1"># Constants</span>
</span><span class='line'><span class="no">TWITTER_DATA_HOST</span> <span class="o">=</span> <span class="s2">&quot;http://nottwitter.danwin.com&quot;</span>
</span><span class='line'><span class="no">TWITTER_USER_DATA_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_DATA_HOST</span><span class="p">,</span> <span class="s2">&quot;users&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">TWITTER_TWEETS_DATA_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_DATA_HOST</span><span class="p">,</span> <span class="s2">&quot;statuses&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">url_for_twitter_user_info</span><span class="p">(</span><span class="n">screen_name</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># pre: screen_name a Twitter account name as a string</span>
</span><span class='line'>  <span class="c1"># returns: url (string) to get user data</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_USER_DATA_PATH</span><span class="p">,</span> <span class="n">screen_name</span><span class="p">,</span> <span class="s1">&#39;show.json&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">url_for_tweets_page</span><span class="p">(</span><span class="n">screen_name</span><span class="p">,</span> <span class="n">pg_num</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># pre: screen_name is a Twitter account name, as a string; pg_num</span>
</span><span class='line'>  <span class="c1">#      the page number, as tweets are separated into numbered pages</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># returns: url (string) to get tweets</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_TWEETS_DATA_PATH</span><span class="p">,</span> <span class="n">screen_name</span><span class="p">,</span> <span class="n">pg_num</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s2">&quot;user_timeline.json&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_data_file</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># pre: u is a URL string</span>
</span><span class='line'>  <span class="c1"># post: downloads from u; has no protection against bad URLs</span>
</span><span class='line'>  <span class="c1"># i.e. this will have to be modified later</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_twitter_user</span><span class="p">(</span><span class="n">screen_name</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># pre: screen_name is a Twitter account name, as a string</span>
</span><span class='line'>  <span class="c1"># returns: user info as a Hash object</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">d</span> <span class="o">=</span> <span class="n">get_data_file</span><span class="p">(</span> <span class="n">url_for_twitter_user_info</span><span class="p">(</span><span class="n">screen_name</span><span class="p">))</span>
</span><span class='line'>  <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_tweets_page</span><span class="p">(</span><span class="n">screen_name</span><span class="p">,</span> <span class="n">pg_num</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># pre: screen_name is a Twitter account name, as a string; pg_num</span>
</span><span class='line'>  <span class="c1">#      the page number, as tweets are separated into numbered pages</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># returns: an array of tweet Hash objects</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">d</span> <span class="o">=</span> <span class="n">get_data_file</span><span class="p">(</span> <span class="n">url_for_tweets_page</span><span class="p">(</span><span class="n">screen_name</span><span class="p">,</span> <span class="n">pg_num</span><span class="p">))</span>
</span><span class='line'>  <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Done loading my code!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The beauty of abstraction</h2>

<p>What was the point of all that work? Was it needed?</p>

<p>We&#8217;re doing more and more complicated tasks. The details remain the same but the pure repetition of text makes it all seem like a jumble. Sometimes it&#8217;s worth it to stop trying new things and wrapping up what we&#8217;ve done in a nice package.</p>

<h3>Revisit and refactor</h3>

<p>Remember this exercise from a few chapters back?</p>

<p>File /Users/dairy/proj/octo-code6hrs/source/downloads/code/latest-tweets.rb could not be found</p>

<p>Write it out, but this time with our new methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">load</span> <span class="s1">&#39;./my_code.rb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">list_url</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_DATA_HOST</span><span class="p">,</span> <span class="s2">&quot;simple-congress-list.txt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="n">get_data_file</span><span class="p">(</span><span class="n">list_url</span><span class="p">)</span>
</span><span class='line'><span class="n">arr_of_names</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr_of_names</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>  <span class="n">tweets_arr</span> <span class="o">=</span> <span class="n">get_tweets_page</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>     
</span><span class='line'>  
</span><span class='line'>  <span class="c1"># just need the first tweet</span>
</span><span class='line'>  <span class="n">tweet</span> <span class="o">=</span> <span class="n">tweets_arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">name</span> <span class="o">+</span> <span class="s2">&quot; tweeted on &quot;</span> <span class="o">+</span> <span class="n">tweet</span><span class="o">[</span><span class="s1">&#39;created_at&#39;</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;: &quot;</span> <span class="o">+</span> <span class="n">tweet</span><span class="o">[</span><span class="err">&#39;</span><span class="n">text</span><span class="o">]</span>    
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plucking out values]]></title>
    <link href="http://learnwhytocode.github.com/lessons/plucking-out-values/"/>
    <updated>2012-09-12T03:15:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/plucking-out-values</id>
    <content type="html"><![CDATA[<h1>Transforming an array</h1>

<p>&#8211; create an array of uppercased words</p>

<p>TK (use the tweet rate method)</p>

<h1>Sort an array</h1>

<h1>Sort inside a block</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizing your code environment]]></title>
    <link href="http://learnwhytocode.github.com/lessons/organizing-your-code-environment/"/>
    <updated>2012-09-12T03:12:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/organizing-your-code-environment</id>
    <content type="html"><![CDATA[<p>If you&#8217;ve taken a break from this tutorial and exited <strong>irb</strong>, you would&#8217;ve had to go through the annoying step of re-running the <code>require</code> statements to bring in the <code>HTTParty</code> and <code>JSON</code> library.</p>

<p>Sure it&#8217;s just a copy-and-paste action. But like everything about programming, this tedious step can be abstracted out for our convenience.</p>

<h2>Using the text editor</h2>

<p>Remember when we installed a text-editor specific for programming (e.g. TextWrangler for OSX, Notepad++ or SciTE for Windows)? Let&#8217;s move out of <strong>irb</strong> for the moment and use the text-editor.</p>

<p>Hopefully you followed the instructions in the early setup chapters (TK) about setting up a <strong>working-directory</strong>. If not, now&#8217;s the time to do so. Just create a new directory somewhere convenient to get to (such as a sub-directory in your <strong>Downloads</strong> folder).</p>

<p>Then, <strong>in your text-editor</strong>, create a new text file and save it in your <strong>working-directory</strong> as <strong>my_code.rb</strong></p>

<h3>A place for all your requirements</h3>

<p>Inside the <strong>my_code.rb</strong> file, let&#8217;s put in the boilerplate <code>require</code> statements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Done loading my code!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Require your own file</h3>

<p>Now quit out of your current <strong>irb</strong> window by typing <code>exit</code>.</p>

<p>This kicks you back to the command prompt.</p>

<p>At the <strong>command prompt</strong>, try to navigate to wherever your <strong>working directory</strong> was.</p>

<p>If you placed it in <code>Downloads/my-working-dir</code>, you should be able to do something like <code>cd ~/Downloads/my-working-dir</code> (in OS X) or <code>cd C:\Downloads\my-working-dir</code> (for Windows PC).</p>

<p>When you&#8217;re there, run <strong>irb</strong> and execute the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">load</span> <span class="s2">&quot;./my_code.rb&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this should print out:</p>

<p><code>#=&gt; Done loading my code!</code></p>

<p>We&#8217;ve simply wrapped up the common libraries we use in a single file.</p>

<p>The keyword <code>load</code> is similar to <code>require</code>. Except that if we modify <strong>my_code.rb</strong>, <code>load</code> will actually re-run the code, whereas <code>require</code> will only do so once during an <strong>irb</strong> session.</p>

<h2>Setting constants</h2>

<p>Remember back in the variables chapter, how I mentioned that variables that have all-uppercase names have a special meaning?</p>

<p>These upppercase variables, called <strong>constants</strong>, are where we put values that we expect to access <em>throughout</em> our programming project (this is an exception to the <strong>scope</strong> concept we learned while writing simple methods).</p>

<p>What are the values that we might use in multiple parts of our program? How about where we actually get the Twitter data from?</p>

<p>Add this after the <code>require</code> statements in your <strong>my_code.rb_</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">TWITTER_DATA_HOST</span> <span class="o">=</span> <span class="s2">&quot;http://nottwitter.danwin.com&quot;</span>
</span><span class='line'><span class="no">TWITTER_USER_DATA_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_DATA_HOST</span><span class="p">,</span> <span class="s2">&quot;users&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">TWITTER_TWEETS_DATA_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_DATA_HOST</span><span class="p">,</span> <span class="s2">&quot;statuses&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now these constants will be available for use in making the data-retrieval calls. This is not actually best practices for a large programming project. But it serves our purposes for now.</p>

<p>Your entire <strong>my_code.rb</strong> file should look like this:</p>

<figure class='code'><figcaption><span> (my_code.rb)</span> <a href='http://learnwhytocode.github.com/downloads/code/organizing-the-code/my_code.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">###############</span>
</span><span class='line'><span class="c1"># Constants</span>
</span><span class='line'><span class="no">TWITTER_DATA_HOST</span> <span class="o">=</span> <span class="s2">&quot;http://nottwitter.danwin.com&quot;</span>
</span><span class='line'><span class="no">TWITTER_USER_DATA_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_DATA_HOST</span><span class="p">,</span> <span class="s2">&quot;users&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">TWITTER_TWEETS_DATA_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">TWITTER_DATA_HOST</span><span class="p">,</span> <span class="s2">&quot;statuses&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Done loading my code!&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making the complex, routine]]></title>
    <link href="http://learnwhytocode.github.com/lessons/simple-routines/"/>
    <updated>2012-09-12T03:08:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/simple-routines</id>
    <content type="html"><![CDATA[<h2>Label our work</h2>

<p>Things are getting complicated and ugly. The code we wrote in the last chapter to find the user with the highest rate of tweets was simple in conception, but pretty ugly visually. You may remember all the steps if you just wrote them five minutes ago, but you&#8217;re going to struggle when you review the code tomorrow.</p>

<p>We&#8217;ve been using <strong>variables</strong> to &#8220;label our data&#8221;. We&#8217;re going to do the same thing with our routines: wrapping them up in a <strong>method</strong> call that can be invoked with a human-readable name.</p>

<h2>How methods are made</h2>

<p>Here&#8217;s a very simple method:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def hello_world
</span><span class='line'>  return "Hello world"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>TK copy and paste</p>

<h3>Methods with arguments</h3>

<h2>Naming methods</h2>

<p>Like variables, you want your method names to act as a quick definition of what they contain. So a method named <code>do_work</code> is virtually worth it. But <code>saves_report_to_disk</code> is pretty good, as it tells you what you need to know about the method&#8217;s effect.</p>

<p>So it&#8217;s OK to keep method names on the long side. How long is too long? It&#8217;s really not about length, but about <em>design</em>. For example:</p>

<p><code>calculates_new_totals_and_saves_report_to_disk</code></p>

<p>The problem with that method is not the length of its name, per se, but that the method is <em>doing too much</em>: its long descriptive name is only a symptom of the problem.</p>

<p>A better design pattern is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">calculate_new_totals</span><span class="p">(</span><span class="n">report</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ... </span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">save_report_to_disk</span><span class="p">(</span><span class="n">report</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">update_report_totals_</span><span class="p">(</span><span class="n">report</span><span class="p">)</span>
</span><span class='line'>  <span class="n">calculate_new_totals</span><span class="p">(</span><span class="n">report</span><span class="p">)</span>
</span><span class='line'>  <span class="n">save_report_to_disk</span><span class="p">(</span><span class="n">report</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>    
</span><span class='line'>
</span><span class='line'><span class="no">Method</span> <span class="n">design</span> <span class="n">is</span> <span class="n">a</span> <span class="n">deep</span> <span class="n">topic</span> <span class="n">to</span> <span class="n">master</span><span class="o">.</span> <span class="no">But</span> <span class="n">a</span> <span class="n">general</span> <span class="n">rule</span> <span class="n">of</span> <span class="n">thumb</span> <span class="k">for</span> <span class="n">any</span> <span class="n">given</span> <span class="nb">method</span> <span class="n">is</span><span class="p">:</span> <span class="k">do</span> <span class="n">one</span> <span class="n">thing</span> <span class="ow">and</span> <span class="k">do</span> <span class="n">it</span> <span class="n">well</span><span class="o">.</span> <span class="no">The</span> <span class="n">guideline</span> <span class="n">of</span> <span class="n">keeping</span> <span class="n">method_names</span> <span class="n">short</span> <span class="n">reinforces</span> <span class="n">that</span> <span class="n">design</span> <span class="n">goal</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">## Scope</span>
</span><span class='line'>
</span><span class='line'><span class="no">For</span> <span class="n">reasons</span> <span class="n">too</span> <span class="n">complicated</span> <span class="n">to</span> <span class="n">fully</span> <span class="n">explain</span> <span class="n">here</span><span class="p">,</span> <span class="n">the</span> <span class="n">variable</span> <span class="n">names</span> <span class="n">that</span> <span class="n">you</span> <span class="n">use</span> <span class="k">for</span> <span class="n">arguments</span><span class="p">,</span> <span class="ow">or</span> <span class="n">that</span> <span class="n">you</span> <span class="n">create</span> <span class="o">**</span><span class="n">inside</span><span class="o">**</span> <span class="n">the</span> <span class="nb">method</span> <span class="n">definition</span><span class="p">,</span> <span class="n">are</span> <span class="o">*</span><span class="ow">not</span> <span class="n">accessible</span> <span class="ow">or</span> <span class="n">knowable</span><span class="o">*</span> <span class="n">by</span> <span class="n">the</span> <span class="n">code</span> <span class="o">**</span><span class="n">outside</span><span class="o">**</span> <span class="n">of</span> <span class="n">the</span> <span class="n">definition</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">In</span> <span class="n">other</span> <span class="n">words</span><span class="p">,</span> <span class="n">the</span> <span class="n">last</span> <span class="n">line</span> <span class="k">in</span> <span class="n">this</span> <span class="n">segment</span> <span class="n">will</span> <span class="n">cause</span> <span class="n">a</span> <span class="s2">&quot;variable not defined&quot;</span> <span class="n">error</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure>


<p> ruby
def hello_world</p>

<pre><code>a_word = "Bonjour"
b_word = "Earth"
return a_word + " " + b_word 
</code></pre>

<p>end</p>

<p>puts a_word</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">You</span> <span class="n">can</span> <span class="n">learn</span> <span class="n">about</span> <span class="nb">method</span> <span class="n">scope</span> <span class="k">when</span> <span class="n">you</span> <span class="n">really</span> <span class="n">delve</span> <span class="n">into</span> <span class="n">programming</span><span class="o">.</span> <span class="no">Right</span> <span class="n">now</span><span class="p">,</span> <span class="n">just</span> <span class="n">keep</span> <span class="n">your</span> <span class="nb">methods</span> <span class="n">simple</span><span class="o">.</span> <span class="no">And</span> <span class="n">a</span> <span class="n">simple</span> <span class="nb">method</span> <span class="n">doesn</span><span class="s1">&#39;t talk to or know about anything outside its narrow little world.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s1">## Exercise</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Let&#39;</span><span class="n">s</span> <span class="n">revisit</span> <span class="n">the</span> <span class="n">exercise</span> <span class="n">from</span> <span class="n">the</span> <span class="n">last</span> <span class="n">chapter</span> <span class="ow">and</span> <span class="n">write</span> <span class="nb">methods</span> <span class="n">to</span> <span class="n">clean</span> <span class="n">it</span> <span class="n">up</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">.</span> <span class="no">Write</span> <span class="n">a</span> <span class="nb">method</span> <span class="n">that</span> <span class="n">calculates</span> <span class="n">the</span> <span class="s2">&quot;age&quot;</span> <span class="n">of</span> <span class="n">a</span> <span class="no">Twitter</span> <span class="n">account</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span> <span class="no">Write</span> <span class="n">a</span> <span class="nb">method</span> <span class="n">that</span> <span class="n">calculates</span> <span class="n">the</span> <span class="n">tweeting</span> <span class="n">rate</span> <span class="n">of</span> <span class="n">an</span> <span class="n">account</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span> <span class="no">Write</span> <span class="n">a</span> <span class="nb">method</span> <span class="n">that</span> <span class="n">expresses</span> <span class="n">the</span> <span class="n">tweeting</span><span class="o">-</span><span class="n">rate</span> <span class="n">as</span> <span class="n">tweets</span> <span class="n">per</span> <span class="o">**</span><span class="n">day</span><span class="o">**.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Here</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">the</span> <span class="n">code</span> <span class="n">from</span> <span class="n">the</span> <span class="n">last</span> <span class="n">chapter</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">include_code</span> <span class="no">Finding</span> <span class="n">the</span> <span class="n">tweetiest</span> <span class="n">user</span> <span class="n">lang</span><span class="ss">:ruby</span> <span class="n">find</span><span class="o">-</span><span class="n">tweetiest</span><span class="o">-</span><span class="n">user</span><span class="o">.</span><span class="n">rb</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">### Answer</span>
</span><span class='line'>
</span><span class='line'> <span class="mi">1</span><span class="o">.</span> <span class="no">Calculating</span> <span class="no">Twitter</span> <span class="n">user</span> <span class="n">age</span> <span class="p">(</span><span class="k">in</span> <span class="n">seconds</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p> ruby</p>

<p>def calc_twitter_user_age_seconds(user_hash)</p>

<pre><code># pre: user_hash is a Hash containing Twitter account info, including a 'created_at' attribute
# returns: number of seconds since account created, as a decimal

a = Time.now - Time.parse(user_hash['created_at'])
return a.to_f
</code></pre>

<p>end</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="mi">2</span><span class="o">.</span> <span class="no">Calculating</span> <span class="n">a</span> <span class="no">Twitter</span> <span class="n">user</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">rate</span> <span class="n">of</span> <span class="n">tweeting</span> <span class="p">(</span><span class="n">per</span> <span class="n">second</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p> ruby</p>

<p>def calc_twitter_user_tweet_rate(user_hash)</p>

<pre><code># pre: user_hash is a Hash containing Twitter account info
# returns: returns the number of tweets per second

return user_hash['statuses_count'].to_f / calc_twitter_user_age_seconds(user_hash) 
</code></pre>

<p>end</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="mi">3</span><span class="o">.</span> <span class="no">Calculating</span> <span class="no">Twitter</span> <span class="n">user</span> <span class="n">age</span> <span class="p">(</span><span class="k">in</span> <span class="n">days</span><span class="p">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p> ruby
def calc_twitter_user_age_days(user_hash)</p>

<pre><code># pre: user_hash is a Hash containing Twitter account info
# returns: returns the number of days since the account was created 

return calc_twitter_user_age_seconds(user_hash) / (60 * 60 * 24)
</code></pre>

<p>end</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">You</span><span class="s1">&#39;ll notice that the rate-calculating method returns an extremely small value. If you switch out `calc_twitter_user_age_seconds` with `calc_twitter_user_age_days`, you&#39;</span><span class="n">ll</span> <span class="n">get</span> <span class="n">a</span> <span class="n">more</span> <span class="n">useful</span> <span class="n">result</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure>


<p> ruby
def calc_twitter_user_tweet_rate(user_hash)</p>

<pre><code># pre: user_hash is a Hash containing Twitter account info
# returns: returns the number of tweets per days

return user_hash['statuses_count'].to_f / calc_twitter_user_age_days(user_hash) 
</code></pre>

<p>end</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">## Another exercise</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rewrite</span> <span class="n">the</span> <span class="n">last</span> <span class="n">chapter</span><span class="s1">&#39;s exercises using the methods above.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s1">### Answer</span>
</span><span class='line'>
</span><span class='line'><span class="s1">most_tweety_member = cmembers[0]</span>
</span><span class='line'>
</span><span class='line'><span class="s1">cmembers.each do |cmember|</span>
</span><span class='line'><span class="s1"> if calc_twitter_user_tweet_rate(cmember) &gt; calc_twitter_user_tweet_rate(most_tweety_member)</span>
</span><span class='line'><span class="s1">     most_tweety_member = cmember</span>
</span><span class='line'><span class="s1"> end</span>
</span><span class='line'><span class="s1">end</span>
</span><span class='line'>
</span><span class='line'><span class="s1">puts most_tweety_member[&#39;</span><span class="nb">name</span><span class="err">&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> IF you want to, you can really abstract out the code and write a <code>find_most_tweety_member</code> method which takes in an array of Twitter account data and returns the one with the highest tweet rate. There&#8217;s a better way to do that though, as we&#8217;ll see in later chapters.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding the most, least, biggest, smallest]]></title>
    <link href="http://learnwhytocode.github.com/lessons/if-to-reduce/"/>
    <updated>2012-09-12T03:08:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/if-to-reduce</id>
    <content type="html"><![CDATA[<h2>Do something on if</h2>

<p>Printing out a list of tweets or users is useful. But maybe we just want to find one tweet. Or a particular user. On Twitter, we&#8217;re usually interested in how many followers another account has amassed.</p>

<p>So how do we pick out that one standout item?</p>

<p>Let&#8217;s start off by grabbing all the account names from last chapter&#8217;s sample list. Then loop through that list and retrieve the <strong>user info</strong> for each account name. Then parse the JSON and store the object into an array.</p>

<p>We&#8217;ll use this array (call it <code>cmembers</code>) for the rest of the chapter.</p>

<h3>Adding to an array</h3>

<p>We&#8217;ve been building arrays using the <code>split</code> method of a string. If we want to create an <code>Array</code> from scratch, initializing it is as easy as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>To add members to <code>arr</code>, you can &#8220;push&#8221; objects into the array with the <code>&lt;&lt;</code> (TK html entity) operator.</p>

<p>Or you can specify an address for each object using the bracket notation; both methods are shown below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;apple&#39;</span>
</span><span class='line'><span class="n">arr</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;bass&#39;</span>
</span><span class='line'><span class="n">arr</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;cow&#39;</span>
</span><span class='line'><span class="n">arr</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;road&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="c1"># =&gt; cow</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">arr</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="c1"># =&gt; road</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code to create array <code>cmembers</code> containing the Hash object representation of each Twitter account is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">HOST_PATH</span> <span class="o">=</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">nottwitter</span><span class="o">.</span><span class="n">danwin</span><span class="o">.</span><span class="n">com</span><span class="o">/</span>
</span><span class='line'><span class="n">list_url</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">HOST_PATH</span><span class="p">,</span> <span class="s2">&quot;simple-congress-list.txt&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">cmembers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">list_url</span><span class="p">)</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>  <span class="n">user_json_url</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">HOST_PATH</span><span class="p">,</span> <span class="s2">&quot;users&quot;</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="s1">&#39;show.json&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">user_json</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">user_json_url</span><span class="p">)</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'>  <span class="n">user_obj</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">user_json</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cmembers</span> <span class="o">&lt;&lt;</span> <span class="n">user_obj</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a quick practice, write the code that loops through <code>cmembers</code> and prints only the number of followers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cmembers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">member</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">cmember</span><span class="o">[</span><span class="s1">&#39;followers_count&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Comparisons and true and false</h2>

<p>To find the most followed user on this list, we need some way of distinguishing a <em>more</em>-followed user from a <em>less</em>-followed user. Remember this from grade school math?</p>

<p><code>1 + 1 &lt; 5</code></p>

<p>Try running this comparison operation in Ruby. Then switch the sign to the other direction and see the result.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">5</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you inspect the class of these <code>true</code> and <code>false</code> objects, you&#8217;ll see that they are not strings, but objects of their own unique type.</p>

<p>For this lesson, all we need to know is <code>greater than</code> and <code>less than</code> operators. But in the future, we may be using these <strong>equality</strong> operators:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="o">==</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="o">!=</span> <span class="mi">1</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="o">==</span> <span class="s2">&quot;1&quot;</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>A common beginner&#8217;s (and professional&#8217;s) mistake is to confuse the equality operator, <code>==</code>, with the assignment operator, <code>=</code></p>

<h2>The if statement</h2>

<p>Enter this into <strong>irb</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">val</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">val</span> <span class="o">&gt;</span> <span class="mi">10</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;The number &quot;</span> <span class="o">+</span> <span class="n">val</span><span class="o">.</span><span class="n">to_s</span> <span class="o">+</span> <span class="s2">&quot; is greater than 10&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output should be:</p>

<p><code>The number 42 is greater than 10</code></p>

<p>Now assign <code>val</code> to <code>5</code> and run the same routine. What happened?</p>

<p>The statement <code>The number 5 is greater than 10</code> should <em>not</em> have been printed.</p>

<h3>Conditional branches</h3>

<p>What follows the <code>if</code> keyword is a <strong>condition</strong>, which can be read in English as: <em>the value of <code>val</code> is greater than 10</em>. If that condition is <code>true</code>, then the code between the <code>if</code> line and the <code>end</code> is executed (the statement is <code>puts</code>).</p>

<p>However, if that condition is <code>false</code>, then that <code>if</code> code is skipped entirely.</p>

<p>Think of <code>if</code> as creating a fork in the road, letting your program diverge onto a different path.</p>

<p>Let&#8217;s practice on the <code>cmember</code> array. Use an <code>if</code> statement to print <em>only</em> the account names that begin with a letter <code>J</code> or <em>after</em>, alphabetically speaking (yes, strings can be compared).</p>

<p>And remember that <code>cmembers</code> contains <code>Hash</code> objects, so you&#8217;ll need to access their <code>'screen_name'</code> attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cmember</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">c</span><span class="o">[</span><span class="s1">&#39;screen_name&#39;</span><span class="o">]</span> <span class="o">&gt;</span> <span class="s1">&#39;J&#39;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">c</span><span class="o">[</span><span class="s1">&#39;screen_name&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>    
</span></code></pre></td></tr></table></div></figure>


<h2>Finding the most</h2>

<p>We now know all we need to find the most followed user.</p>

<p>In abstract terms, what are we trying to do? We&#8217;re trying to <em>reduce</em> this collection to a single member, the member with the most followers.</p>

<p>We can use a variable to store what is currently the most followed member through each execution of the loop. Then with some comparison logic, that variable will contain the member we want at the end of the loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># initialize a variable with the first member:</span>
</span><span class='line'>
</span><span class='line'><span class="n">most_followed_member</span> <span class="o">=</span> <span class="n">cmembers</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">cmembers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">member</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">member</span><span class="o">[</span><span class="s1">&#39;followers_count&#39;</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">most_followed_member</span><span class="o">[</span><span class="s1">&#39;followers_count&#39;</span><span class="o">].</span><span class="n">to_i</span>
</span><span class='line'>      <span class="n">most_followed_member</span> <span class="o">=</span> <span class="n">member</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'><span class="k">end</span>    
</span></code></pre></td></tr></table></div></figure>


<p>Note how we had to convert the <code>'followers_count'</code> value to a number. Try comparing the values of <code>"9"</code> and <code>"1000"</code> to see how strings are compared <em>alphabetically</em>, not <em>numerically</em>.</p>

<h2>Exercise</h2>

<p>Find the Congressmember with the highest <strong>rate of tweets</strong>.</p>

<p>For this, you&#8217;ll want to require the <code>'time'</code> library. Check out the <a href="http://www.ruby-doc.org/core-1.9.3/Time.html">documentation</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">09</span><span class="o">-</span><span class="mi">19</span> <span class="mo">07</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mi">39</span> <span class="o">-</span><span class="mo">0400</span>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;Sep. 1, 2012&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">09</span><span class="o">-</span><span class="mo">01</span> <span class="mo">00</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="o">-</span><span class="mo">0400</span>
</span><span class='line'>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="c1"># =&gt; 1348053886 </span>
</span><span class='line'>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="no">Time</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;Sep. 1, 2012&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; 1581937.303837</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># TK (works in Ruby 1.8.7?)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check out the Twitter user account info to find the attributes relating to number of tweets and when a user account was created.</p>

<h3>Answer</h3>

<p>File /Users/dairy/proj/octo-code6hrs/source/downloads/code/find-tweetiest-user.rb could not be found</p>

<p>A few points:</p>

<ol>
<li>Like Arrays, you can assign values to a Hash object using the bracket notation.</li>
<li>Given that the number of seconds that a user account has existed will likely always be greater than the number of tweets they have, you have to work with <code>Float</code> (decimal) numbers and the <code>to_f</code> conversion</li>
<li>This can be done in one loop. I was just breaking out the steps.</li>
<li>There&#8217;s a much easier way to sort values, but we&#8217;ll get to that later.</li>
</ol>


<p>&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loop with a list]]></title>
    <link href="http://learnwhytocode.github.com/lessons/loop-with-a-list/"/>
    <updated>2012-09-12T03:07:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/loop-with-a-list</id>
    <content type="html"><![CDATA[<p>As fun as it&#8217;s been to collect tweets from Rep. Nancy Pelosi, you probably have bigger ideas, or at least want to compare Pelosi to her peers.</p>

<p>Good for you; the big picture should always be considered. The problem is, the big picture takes more work.</p>

<p>And this is where programming with its ability to zip through repetitive steps really pays off.</p>

<h2>Reading a simple list</h2>

<p>You could probably look up the Twitter handles of the other Congressmembers yourself and then copy and paste them into whatever tweet-collecting program you&#8217;ve devised.</p>

<p>But that&#8217;s not scalable. And totally unnecessary if such a list already exists.</p>

<p>Here&#8217;s a <a href="http://nottwitter.danwin.com/simple-congress-list.txt">sample list of ten congressmembers</a>. It&#8217;s just a straightforward textfile with one Twitter name per line:</p>

<p>Liquid error: ClassNotFound: no lexer for alias &#8216;txt&#8217; found</p>

<p>Wouldn&#8217;t it be nice if we could break this into an array?</p>

<h3>Split</h3>

<p>We know that if we <code>HTTParty.get</code> that list, we&#8217;ll have a <code>String</code> of text. But we don&#8217;t want <em>one</em> string, we want as many strings as there are lines.</p>

<p>So let&#8217;s use the  <code>split</code> method of <code>String</code>. It takes in <strong>one argument</strong>: the string that you want to divide the invoking string by. It <strong>returns:</strong> an array of elements from that divided string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;hello world, I am 42 years old&quot;</span>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">split</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;hello&quot;, &quot;world,&quot;, &quot;I&quot;, &quot;am&quot;, &quot;42&quot;, &quot;years&quot;, &quot;old&quot;] </span>
</span><span class='line'><span class="nb">puts</span> <span class="n">arr</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'><span class="c1"># =&gt; 7</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The backslash and newline character</h3>

<p>To get an array of Congressmember Twitter names, we need to split the sample text file by whatever character is used to create a <strong>newline</strong>, i.e. the thing that happens when we press <strong>Enter</strong>.</p>

<p>This is the <strong>newline</strong> character: <code>"\n"</code></p>

<p>In Ruby strings, newlines are just characters. That <strong>backslash</strong> &ndash; <code>\n</code> &ndash; before the <code>n</code> &ndash; has a special meaning in Ruby (and other programming languages).</p>

<p>The backslash acts as an <strong>escape character</strong>, and it affects the character that immediately follows it. In this case, this is the letter <code>n</code>.</p>

<p>In other words, <code>\n</code> is not just a normal, literal <code>n</code> character, but the symbol for a <strong>newline</strong>, i.e. a line break.</p>

<p>So, write the code to:</p>

<ol>
<li>Download from the URL <a href="http://nottwitter.danwin.com/simple-congress-list.txt">at this link</a></li>
<li>Separate it into an array</li>
<li>Loop through the array, printing out an uppercase version of each string:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://nottwitter.danwin.com/simple-congress-list.txt&quot;</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">name</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># JOEBIDEN</span>
</span><span class='line'><span class="c1"># ROYBLUNT</span>
</span><span class='line'><span class="c1"># SENATORBOXER</span>
</span><span class='line'><span class="c1"># CHUCKGRASSLEY</span>
</span><span class='line'><span class="c1"># DARRELLISSA</span>
</span><span class='line'><span class="c1"># JOELIEBERMAN</span>
</span><span class='line'><span class="c1"># REPRONPAUL</span>
</span><span class='line'><span class="c1"># JAREDPOLIS</span>
</span><span class='line'><span class="c1"># SENRANDPAUL</span>
</span><span class='line'><span class="c1"># NANCYPELOSI</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Exercise</h2>

<p>Obviously, we don&#8217;t want just the names in uppercase, we want to <em>do</em> something. Why don&#8217;t we combine the power of this loop with some of the functionality from last chapter&#8217;s loops?</p>

<p>Once you&#8217;ve gathered the names in the list, loop through the list and print the <code>created_at</code> and <code>text</code>  of the <em>latest</em> tweet from each of the Twitter accounts.</p>

<p>(Twitter spits out the tweets in reverse chronological order. So for our purposes, this would be the <em>first</em> tweet in an array).</p>

<h2>Answer</h2>

<p>File /Users/dairy/proj/octo-code6hrs/source/downloads/code/latest-tweets.rb could not be found</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loop and repeat]]></title>
    <link href="http://learnwhytocode.github.com/lessons/loop-and-repeat/"/>
    <updated>2012-09-12T03:06:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/loop-and-repeat</id>
    <content type="html"><![CDATA[<p>We&#8217;ve run through a fair number of concepts and code but really haven&#8217;t done anything we couldn&#8217;t do (and do faster) with a web browser, such as look up a Twitter user&#8217;s number of followers, or how many people retweeted his/her most recent tweet.</p>

<p>If you&#8217;re a pretty fast copy-and-paster, you might be able to outpace a mouse-clicker by copying-and-pasting the tweet-data-fetching routines over and over, which is not a bad accomplishment.</p>

<p>But we can do <em>much</em> better than that.</p>

<h2>Make a simple goal</h2>

<p>In programming, you&#8217;ll get more return out of every line of code when you break things down into simple tasks.</p>

<p>In the last chapter, what was one of our goals? <em>To print out the text of a tweet</em>.</p>

<h2>Repeat that step across a collection</h2>

<p>The code for printing out one tweet&#8217;s text is the same as it is for any other given tweet. The only difference is the <em>reference</em> to each tweet, i.e. its address in an array.</p>

<h2>each</h2>

<p>Ruby collections have many useful methods, but the one we&#8217;ll use the most is <code>each</code>. In a nutshell, <code>each</code> lets us loop through a collection and perform a method on each member of that collection.</p>

<p>On a simple array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">some_item</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">some_item</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt;</span>
</span><span class='line'><span class="n">A</span>
</span><span class='line'><span class="n">B</span>
</span><span class='line'><span class="n">C</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without getting into the nitty-gritty, think of what is between the <code>do</code> and the <code>end</code> as the routine done on each <code>some_item</code>.</p>

<p>What is <code>some_item</code>? In this syntax, the value in the straight pipe-characters is the variable name used to reference a member of the collection.</p>

<p>If you think of <code>each</code> as looping through the collection and doing something on <em>each</em> member of the collection, then <code>some_item</code> (which we could name anything we want, as if it were a variable) points to the member of the current iteration.</p>

<p>There are other variations of the <code>each</code> method. For a <code>Hash</code> object, you could use <code>each_pair</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_hash</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;alpha&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;beta&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;charlie&#39;</span><span class="p">}</span>
</span><span class='line'><span class="n">my_hash</span><span class="o">.</span><span class="n">each_pair</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">k</span><span class="o">.</span><span class="n">to_s</span> <span class="o">+</span> <span class="s2">&quot; is the key for: &quot;</span> <span class="o">+</span> <span class="n">v</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt;</span>
</span><span class='line'><span class="n">a</span> <span class="n">is</span> <span class="n">the</span> <span class="n">key</span> <span class="k">for</span><span class="p">:</span> <span class="n">alpha</span>
</span><span class='line'><span class="n">b</span> <span class="n">is</span> <span class="n">the</span> <span class="n">key</span> <span class="k">for</span><span class="p">:</span> <span class="n">beta</span>
</span><span class='line'><span class="n">c</span> <span class="n">is</span> <span class="n">the</span> <span class="n">key</span> <span class="k">for</span><span class="p">:</span> <span class="n">charlie</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Exercise</h2>

<ol>
<li><p>Using the <code>each</code> method, loop through the array of tweets from the last lesson and print out the contents of the text.</p></li>
<li><p>Using the <code>each</code> method again, loop through the tweets and print the <em>length</em> of their text.</p></li>
<li><p>Same procedure above, but use it to calculate the <em>average</em> length of a tweet.</p></li>
<li><p>Using the <code>each</code> method again, loop through and print out every attribute of each tweet.</p></li>
</ol>


<h3>Answer</h3>

<p>To get the tweets in an array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;TK&quot;</span>
</span><span class='line'><span class="n">json_str</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'><span class="n">tweets_obj</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">json_str</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ol>
<li>Printing out text:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">tweets_obj</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tweet</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">tweet</span><span class="o">[</span><span class="s1">&#39;text&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Printing out the length of each tweet</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">tweets_obj</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tweet</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">tweet</span><span class="o">[</span><span class="s1">&#39;text&#39;</span><span class="o">].</span><span class="n">length</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Printing out the average length the tweets</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">total_length</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">tweets_obj</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tweet</span><span class="o">|</span>
</span><span class='line'>  <span class="n">total_length</span> <span class="o">=</span> <span class="n">total_length</span> <span class="o">+</span> <span class="n">tweet</span><span class="o">[</span><span class="s1">&#39;text&#39;</span><span class="o">].</span><span class="n">length</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">total_length</span> <span class="o">/</span> <span class="n">tweets_obj</span><span class="o">.</span><span class="n">length</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Printing out the attributes of each tweet</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">tweets_obj</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tweet</span><span class="o">|</span>
</span><span class='line'>  <span class="n">tweet</span><span class="o">.</span><span class="n">each_pair</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">key</span><span class="o">.</span><span class="n">to_s</span> <span class="o">+</span> <span class="s2">&quot; --&gt; &quot;</span> <span class="o">+</span> <span class="n">val</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> if you are using <strong>irb</strong>, the result of each <code>each</code> invocation will spit out the entire contents of the collection. This is <strong>irb</strong>&#8217;s normal behavior, to return the value of each method call after you hit <strong>Enter</strong>. It&#8217;s slightly annoying and means you&#8217;ll have to scroll up a bit to find the output you want. Or you could append a trivial line of code after the keyword <code>end</code>, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">total_length</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">tweets_obj</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tweet</span><span class="o">|</span>
</span><span class='line'>  <span class="n">total_length</span> <span class="o">=</span> <span class="n">total_length</span> <span class="o">+</span> <span class="n">tweet</span><span class="o">[</span><span class="s1">&#39;text&#39;</span><span class="o">].</span><span class="n">length</span>
</span><span class='line'><span class="k">end</span><span class="p">;</span> <span class="nb">puts</span> <span class="s2">&quot;done with each&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">total_length</span> <span class="o">/</span> <span class="n">tweets_obj</span><span class="o">.</span><span class="n">length</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pick out the text from many tweets]]></title>
    <link href="http://learnwhytocode.github.com/lessons/pick-out-the-text-from-many-tweets/"/>
    <updated>2012-09-12T03:05:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/pick-out-the-text-from-many-tweets</id>
    <content type="html"><![CDATA[<p>In the last chapter, we dealt with the Twitter user data object, which when parsed, is a Ruby <code>Hash</code>.</p>

<p>But the data object for a page of tweets is different:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;TK&quot;</span>
</span><span class='line'><span class="n">json_str</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'><span class="n">tweets_obj</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">json_str</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">tweets_obj</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="c1"># =&gt; Array</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you look at the contents of the JSON in <code>tweets_obj</code>, you should see something that looks like a collection of <code>Hash</code> objects. But what exactly is this <code>Array</code> that holds them?</p>

<h2>The Array object</h2>

<p>In Python, arrays are known as <strong>lists</strong>, which may be the easier way to think of this type of <strong>collection</strong>. Like the <code>Hash</code>, the <code>Array</code> is a collection of objects. However, instead of using <strong>keys</strong>, the objects in <code>Array</code> can be accessed (using the same kind of square-bracket notation) in a numerically sequential order.</p>

<p>Here&#8217;s a sample <code>Array</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;beta&#39;</span><span class="p">,</span> <span class="s1">&#39;cow&#39;</span><span class="p">,</span> <span class="s1">&#39;dog&#39;</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; a</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">arr</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; cow</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll examine arrays in greater detail later. For now, note:</p>

<ol>
<li><p>Array items are accessed with integers. They don&#8217;t use strings or other types of data-objects (as a <code>Hash</code> can)</p></li>
<li><p>A Ruby array is zero-indexed. That means the first element is found at the address of <code>0</code>. The second element is at <code>1</code>, and so forth.</p></li>
</ol>


<h2>Collections inside collections</h2>

<p>The string and number datatypes are primitive compared to the collection datatypes. As an example, the <code>tweets_obj</code> array contains a bunch of objects, and if you inspect each object, you&#8217;ll see that each is itself a <code>Hash</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span>  <span class="n">tweets_obj</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="c1">#=&gt; Hash</span>
</span><span class='line'>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="n">tweets_obj</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">y</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="c1">#=&gt; Hash</span>
</span></code></pre></td></tr></table></div></figure>


<p>In other words, each individual Tweet is represented as a <code>Hash</code></p>

<h2>Exercise</h2>

<p>Look over the downloaded JSON to see the structure of the Tweet hash object. Print out the following:</p>

<ol>
<li>The text of the first tweet</li>
<li>The number of retweets of the eighth tweet</li>
<li>The date of the 14th tweet</li>
</ol>


<h3>Answer</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">tweets_obj</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="s1">&#39;text&#39;</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">tweets_obj</span><span class="o">[</span><span class="mi">7</span><span class="o">][</span><span class="s1">&#39;retweet_count&#39;</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">tweets_obj</span><span class="o">[</span><span class="mi">14</span><span class="o">][</span><span class="s1">&#39;created_at&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pick out the text of a tweet]]></title>
    <link href="http://learnwhytocode.github.com/lessons/pick-out-the-text-from-a-tweet/"/>
    <updated>2012-09-12T03:03:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/pick-out-the-text-from-a-tweet</id>
    <content type="html"><![CDATA[<p>In the last chapter we parsed a JSON file containing Twitter account information.</p>

<p>But what does that mean, exactly?</p>

<p>Run the routine again to fetch the info for a Twitter account:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;TK&quot;</span>
</span><span class='line'><span class="n">json_str</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'><span class="n">twitter_user</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">json_str</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> The rest of this lesson assumes that <code>twitter_user</code> contains the value that it does at the end of this routine. If you exit and relaunch <strong>irb</strong>, just re-run this routine to follow along again.</p>

<p>What is the <code>class</code> of the parsed JSON?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">twitter_user</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="c1">#=&gt; Hash</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Hash Object</h2>

<p>The <code>Hash</code> is one of Ruby&#8217;s <strong>collection</strong> classes and is ubiquitous in Ruby coding (in Python, it&#8217;s called a <strong>dictionary</strong>).</p>

<p><strong>Collection</strong> classes are data objects that are collections of other data objects (so yes, this means a <code>Hash</code> can contain many other <code>Hash</code> objects).</p>

<p>Here&#8217;s how a simple <code>Hash</code> object is initialized:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">simple_hash</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="o">=&gt;</span><span class="mi">101</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The curly-braces denote the entire <code>Hash</code>.</li>
<li>Hashes are composed of <strong>key-value</strong> pairs</li>
<li>This <code>simple_hash</code> has only one item, i.e. one <strong>key-value</strong> pair</li>
<li>The <strong>key</strong> in that single pair is on the <em>left</em> side: <code>'a'</code>. The <strong>value</strong> is on the <em>right</em>, i.e. 101</li>
</ul>


<h3>Accessing members of a Hash</h3>

<p>To access an item in a <code>Hash</code>, we use <strong>square-bracket notation</strong> to specify the <strong>key</strong> of the <strong>value</strong> that we want.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">simple_hash</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span> <span class="o">=&gt;</span> <span class="mi">101</span><span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">simple_hash</span><span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="o">]</span>
</span><span class='line'><span class="c1"># =&gt; 101</span>
</span></code></pre></td></tr></table></div></figure>


<p>Try it yourself. In the <code>Hash</code> below:
1. Print out the value at key <code>42</code>
2. Access the pair with the value of <code>"dog"</code> and store the value (i.e. <code>"dog"</code>) in a variable</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">multi_hash</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span> <span class="o">=&gt;</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">42</span> <span class="o">=&gt;</span> <span class="s1">&#39;life&#39;</span><span class="p">,</span> <span class="mi">999</span> <span class="o">=&gt;</span> <span class="s1">&#39;9&#39;</span><span class="p">,</span> <span class="s2">&quot;Hello world&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;dog&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">multi_hash</span><span class="o">[</span><span class="mi">42</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; life</span>
</span><span class='line'><span class="n">v</span> <span class="o">=</span> <span class="n">multi_hash</span><span class="o">[</span><span class="s1">&#39;Hello world&#39;</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">v</span>
</span><span class='line'><span class="c1">#=&gt; &quot;dog&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Exercise</h2>

<p>Go back to the <code>twitter_user</code> object, which we initialized at the beginning of this lesson. Print out:</p>

<ol>
<li>The user&#8217;s real name</li>
<li>The user&#8217;s Twitter bio</li>
<li>The user&#8217;s number of followers</li>
</ol>


<p><strong>Hint:</strong> Printing out the <code>twitter_user</code> object might be helpful here.</p>

<h3>Answer</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">twitter_user</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; Nancy Pelosi</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">twitter_user</span><span class="o">[</span><span class="s1">&#39;description&#39;</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; Democratic Leader, focused on strengthening America&#39;s middle class and creating jobs; mother, grandmother, dark chocolate connoisseur.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">twitter_user</span><span class="o">[</span><span class="s1">&#39;followers_count&#39;</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; 226259</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Bonus:</strong> What happens when you try to access a non-existent key?</p>
]]></content>
  </entry>
  
</feed>
