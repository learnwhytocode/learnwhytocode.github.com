<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learn Why to Code]]></title>
  <link href="http://learnwhytocode.github.com/atom.xml" rel="self"/>
  <link href="http://learnwhytocode.github.com/"/>
  <updated>2012-09-19T08:38:24-04:00</updated>
  <id>http://learnwhytocode.github.com/</id>
  <author>
    <name><![CDATA[Dan Nguyen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Now Learn How]]></title>
    <link href="http://learnwhytocode.github.com/lessons/now-learn-how/"/>
    <updated>2012-12-30T00:00:00-05:00</updated>
    <id>http://learnwhytocode.github.com/lessons/now-learn-how</id>
    <content type="html"><![CDATA[<hr />

<p>layout: post
title: &#8220;Now learn how&#8221;
date: 2012-09-12 12:30
comments: true
categories:
problem: &#8220;What now?&#8221;
solution: &#8220;Once you&#8217;ve learned why programming is important for real-world analysis and tasks, you just have to learn how to do it better.&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mash more mashup]]></title>
    <link href="http://learnwhytocode.github.com/lessons/mash-more-mashup/"/>
    <updated>2012-09-12T06:30:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/mash-more-mashup</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make a web mashup]]></title>
    <link href="http://learnwhytocode.github.com/lessons/make-a-mashup/"/>
    <updated>2012-09-12T06:20:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/make-a-mashup</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Which websites do Congressmembers tweet about?]]></title>
    <link href="http://learnwhytocode.github.com/lessons/make-our-own-data/"/>
    <updated>2012-09-12T06:17:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/make-our-own-data</id>
    <content type="html"><![CDATA[<p>Perhaps the greatest power that programming gives is the ability to create your own data source.</p>

<p>We&#8217;ve already been doing this all along, of course.</p>

<h2>Which links are most tweeted?</h2>

<h2>What are the short links?</h2>

<h2>Build our own link-finder</h2>

<h2>Build our own short-link database</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Judging tweets by their text]]></title>
    <link href="http://learnwhytocode.github.com/lessons/judging-tweets-by-their-text/"/>
    <updated>2012-09-12T06:15:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/judging-tweets-by-their-text</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flexible and fast data analysis]]></title>
    <link href="http://learnwhytocode.github.com/lessons/flexible-analysis/"/>
    <updated>2012-09-12T06:10:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/flexible-analysis</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making spreadsheets]]></title>
    <link href="http://learnwhytocode.github.com/lessons/data-printing/"/>
    <updated>2012-09-12T06:05:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/data-printing</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filter a collection]]></title>
    <link href="http://learnwhytocode.github.com/lessons/filtering-a-list/"/>
    <updated>2012-09-12T04:02:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/filtering-a-list</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizing your code environment]]></title>
    <link href="http://learnwhytocode.github.com/lessons/writing-wrapper-methods/"/>
    <updated>2012-09-12T03:15:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/writing-wrapper-methods</id>
    <content type="html"><![CDATA[<h1>getting a file</h1>

<h1>parsing a twitter account info json</h1>

<h1>parsing an array of tweets</h1>

<h1>moving code to another file</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plucking out values]]></title>
    <link href="http://learnwhytocode.github.com/lessons/plucking-out-values/"/>
    <updated>2012-09-12T03:15:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/plucking-out-values</id>
    <content type="html"><![CDATA[<h1>Transforming an array</h1>

<p>&#8211; create an array of uppercased words</p>

<p>TK (use the tweet rate method)</p>

<h1>Sort an array</h1>

<h1>Sort inside a block</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizing your code environment]]></title>
    <link href="http://learnwhytocode.github.com/lessons/organizing-your-code-environment/"/>
    <updated>2012-09-12T03:12:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/organizing-your-code-environment</id>
    <content type="html"><![CDATA[<h1>setting constants</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding the most, least, biggest, smallest]]></title>
    <link href="http://learnwhytocode.github.com/lessons/if-to-reduce/"/>
    <updated>2012-09-12T03:08:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/if-to-reduce</id>
    <content type="html"><![CDATA[<h2>Do something on if</h2>

<p>Printing out a list of tweets or users is useful. But maybe we just want to find one tweet. Or a particular user. On Twitter, we&#8217;re usually interested in how many followers another account has amassed.</p>

<p>So how do we pick out that one standout item?</p>

<p>Let&#8217;s start off by grabbing all the account names from last chapter&#8217;s sample list. Then loop through that list and retrieve the <strong>user info</strong> for each account name. Then parse the JSON and store the object into an array.</p>

<p>We&#8217;ll use this array (call it <code>cmembers</code>) for the rest of the chapter.</p>

<h3>Adding to an array</h3>

<p>We&#8217;ve been building arrays using the <code>split</code> method of a string. If we want to create an <code>Array</code> from scratch, initializing it is as easy as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>To add members to <code>arr</code>, you can &#8220;push&#8221; objects into the array with the <code>&lt;&lt;</code> (TK html entity) operator.</p>

<p>Or you can specify an address for each object using the bracket notation; both methods are shown below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;apple&#39;</span>
</span><span class='line'><span class="n">arr</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;bass&#39;</span>
</span><span class='line'><span class="n">arr</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;cow&#39;</span>
</span><span class='line'><span class="n">arr</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;road&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="c1"># =&gt; cow</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">arr</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="c1"># =&gt; road</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code to create array <code>cmembers</code> containing the Hash object representation of each Twitter account is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">HOST_PATH</span> <span class="o">=</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">nottwitter</span><span class="o">.</span><span class="n">danwin</span><span class="o">.</span><span class="n">com</span><span class="o">/</span>
</span><span class='line'><span class="n">list_url</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">HOST_PATH</span><span class="p">,</span> <span class="s2">&quot;simple-congress-list.txt&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">cmembers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">list_url</span><span class="p">)</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>  <span class="n">user_json_url</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">HOST_PATH</span><span class="p">,</span> <span class="s2">&quot;users&quot;</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="s1">&#39;show.json&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">user_json</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">user_json_url</span><span class="p">)</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'>  <span class="n">user_obj</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">user_json</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cmembers</span> <span class="o">&lt;&lt;</span> <span class="n">user_obj</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a quick practice, write the code that loops through <code>cmembers</code> and prints only the number of followers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cmembers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">member</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">cmember</span><span class="o">[</span><span class="s1">&#39;followers_count&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Comparisons and true and false</h2>

<p>To find the most followed user on this list, we need some way of distinguishing a <em>more</em>-followed user from a <em>less</em>-followed user. Remember this from grade school math?</p>

<p><code>1 + 1 &lt; 5</code></p>

<p>Try running this comparison operation in Ruby. Then switch the sign to the other direction and see the result.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">5</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you inspect the class of these <code>true</code> and <code>false</code> objects, you&#8217;ll see that they are not strings, but objects of their own unique type.</p>

<p>For this lesson, all we need to know is <code>greater than</code> and <code>less than</code> operators. But in the future, we may be using these <strong>equality</strong> operators:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="o">==</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="o">!=</span> <span class="mi">1</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="o">==</span> <span class="s2">&quot;1&quot;</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>A common beginner&#8217;s (and professional&#8217;s) mistake is to confuse the equality operator, <code>==</code>, with the assignment operator, <code>=</code></p>

<h2>The if statement</h2>

<p>Enter this into <strong>irb</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">val</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">val</span> <span class="o">&gt;</span> <span class="mi">10</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;The number &quot;</span> <span class="o">+</span> <span class="n">val</span><span class="o">.</span><span class="n">to_s</span> <span class="o">+</span> <span class="s2">&quot; is greater than 10&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output should be:</p>

<p><code>The number 42 is greater than 10</code></p>

<p>Now assign <code>val</code> to <code>5</code> and run the same routine. What happened?</p>

<p>The statement <code>The number 5 is greater than 10</code> should <em>not</em> have been printed.</p>

<h3>Conditional branches</h3>

<p>What follows the <code>if</code> keyword is a <strong>condition</strong>, which can be read in English as: <em>the value of <code>val</code> is greater than 10</em>. If that condition is <code>true</code>, then the code between the <code>if</code> line and the <code>end</code> is executed (the statement is <code>puts</code>).</p>

<p>However, if that condition is <code>false</code>, then that <code>if</code> code is skipped entirely.</p>

<p>Think of <code>if</code> as creating a fork in the road, letting your program diverge onto a different path.</p>

<p>Let&#8217;s practice on the <code>cmember</code> array. Use an <code>if</code> statement to print <em>only</em> the account names that begin with a letter <code>J</code> or <em>after</em>, alphabetically speaking (yes, strings can be compared).</p>

<p>And remember that <code>cmembers</code> contains <code>Hash</code> objects, so you&#8217;ll need to access their <code>'screen_name'</code> attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cmember</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">c</span><span class="o">[</span><span class="s1">&#39;screen_name&#39;</span><span class="o">]</span> <span class="o">&gt;</span> <span class="s1">&#39;J&#39;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">c</span><span class="o">[</span><span class="s1">&#39;screen_name&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>    
</span></code></pre></td></tr></table></div></figure>


<h2>Finding the most</h2>

<p>We now know all we need to find the most followed user.</p>

<p>In abstract terms, what are we trying to do? We&#8217;re trying to <em>reduce</em> this collection to a single member, the member with the most followers.</p>

<p>We can use a variable to store what is currently the most followed member through each execution of the loop. Then with some comparison logic, that variable will contain the member we want at the end of the loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># initialize a variable with the first member:</span>
</span><span class='line'>
</span><span class='line'><span class="n">most_followed_member</span> <span class="o">=</span> <span class="n">cmembers</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">cmembers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">member</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">member</span><span class="o">[</span><span class="s1">&#39;followers_count&#39;</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">most_followed_member</span><span class="o">[</span><span class="s1">&#39;followers_count&#39;</span><span class="o">].</span><span class="n">to_i</span>
</span><span class='line'>      <span class="n">most_followed_member</span> <span class="o">=</span> <span class="n">member</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'><span class="k">end</span>    
</span></code></pre></td></tr></table></div></figure>


<p>Note how we had to convert the <code>'followers_count'</code> value to a number. Try comparing the values of <code>"9"</code> and <code>"1000"</code> to see how strings are compared <em>alphabetically</em>, not <em>numerically</em>.</p>

<h2>Exercise</h2>

<p>Find the Congressmember with the highest rate of tweets:</p>

<p>For this, you&#8217;ll want to require the <code>'time'</code> library. Check out the <a href="http://www.ruby-doc.org/core-1.9.3/Time.html">documentation</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">09</span><span class="o">-</span><span class="mi">19</span> <span class="mo">07</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mi">39</span> <span class="o">-</span><span class="mo">0400</span>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;Sep. 1, 2012&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">09</span><span class="o">-</span><span class="mo">01</span> <span class="mo">00</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="o">-</span><span class="mo">0400</span>
</span><span class='line'>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="c1"># =&gt; 1348053886 </span>
</span><span class='line'>
</span><span class='line'><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="no">Time</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;Sep. 1, 2012&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; 1581937.303837</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># TK (works in Ruby 1.8.7?)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check out the Twitter user account info to find the attributes relating to number of tweets and when a user account was created.</p>

<h3>Answer</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;time&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cmembers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">cmember</span><span class="o">|</span>
</span><span class='line'>  <span class="n">seconds_from_creation</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="no">Time</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">cmember</span><span class="o">[</span><span class="s1">&#39;created_at&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cmember</span><span class="o">[</span><span class="s1">&#39;tweet_rate&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">cmember</span><span class="o">[</span><span class="s1">&#39;statuses_count&#39;</span><span class="o">].</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">seconds_from_creation</span>    
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">most_tweety_member</span> <span class="o">=</span> <span class="n">cmembers</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">cmembers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">member</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">member</span><span class="o">[</span><span class="s1">&#39;tweet_rate&#39;</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">most_tweety_member</span><span class="o">[</span><span class="s1">&#39;tweet_rate&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="n">most_tweety_member</span> <span class="o">=</span> <span class="n">member</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">A</span> <span class="n">few</span> <span class="n">points</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">.</span> <span class="no">Like</span> <span class="no">Arrays</span><span class="p">,</span> <span class="n">you</span> <span class="n">can</span> <span class="n">assign</span> <span class="n">values</span> <span class="n">to</span> <span class="n">a</span> <span class="no">Hash</span> <span class="n">object</span> <span class="n">using</span> <span class="n">the</span> <span class="n">bracket</span> <span class="n">notation</span><span class="o">.</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span> <span class="no">Given</span> <span class="n">that</span> <span class="n">the</span> <span class="n">number</span> <span class="n">of</span> <span class="n">seconds</span> <span class="n">that</span> <span class="n">a</span> <span class="n">user</span> <span class="n">account</span> <span class="n">has</span> <span class="n">existed</span> <span class="n">will</span> <span class="n">likely</span> <span class="n">always</span> <span class="n">be</span> <span class="n">greater</span> <span class="n">than</span> <span class="n">the</span> <span class="n">number</span> <span class="n">of</span> <span class="n">tweets</span> <span class="n">they</span> <span class="n">have</span><span class="p">,</span> <span class="n">you</span> <span class="n">have</span> <span class="n">to</span> <span class="n">work</span> <span class="n">with</span> <span class="sb">`Float`</span> <span class="p">(</span><span class="n">decimal</span><span class="p">)</span> <span class="n">numbers</span> <span class="ow">and</span> <span class="n">the</span> <span class="sb">`to_f`</span> <span class="n">conversion</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span> <span class="no">This</span> <span class="n">can</span> <span class="n">be</span> <span class="n">done</span> <span class="k">in</span> <span class="n">one</span> <span class="kp">loop</span><span class="o">.</span> <span class="n">I</span> <span class="n">was</span> <span class="n">just</span> <span class="n">breaking</span> <span class="n">out</span> <span class="n">the</span> <span class="n">steps</span><span class="o">.</span>
</span><span class='line'><span class="mi">4</span><span class="o">.</span> <span class="no">There</span><span class="s1">&#39;s a much easier way to sort values, but we&#39;</span><span class="n">ll</span> <span class="n">get</span> <span class="n">to</span> <span class="n">that</span> <span class="n">later</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loop with a list]]></title>
    <link href="http://learnwhytocode.github.com/lessons/loop-with-a-list/"/>
    <updated>2012-09-12T03:07:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/loop-with-a-list</id>
    <content type="html"><![CDATA[<p>As fun as it&#8217;s been to collect tweets from Rep. Nancy Pelosi, you probably have bigger ideas, or at least want to compare Pelosi to her peers.</p>

<p>Good for you; the big picture should always be considered. The problem is, the big picture takes more work.</p>

<p>And this is where programming begins to pay off.</p>

<h2>Reading a simple list</h2>

<p>You could probably look up the Twitter handles of the other Congressmembers yourself and then copy and paste them into whatever tweet-collecting program you&#8217;ve devised.</p>

<p>But that&#8217;s not scalable. And totally unnecessary if such a list already exists.</p>

<p>Here&#8217;s a <a href="http://nottwitter.danwin.com/simple-congress-list.txt">sample list of ten congressmembers</a>. It&#8217;s just a straightforward textfile with one Twitter name per line:</p>

<p>Liquid error: ClassNotFound: no lexer for alias &#8216;txt&#8217; found</p>

<p>Wouldn&#8217;t it be nice if we could break this into an array?</p>

<h3>Split</h3>

<p>We know that if we <code>HTTParty.get</code> that list, we&#8217;ll have a <code>String</code> of text. But we don&#8217;t want <em>one</em> string, we want as many strings as there are lines.</p>

<p>So let&#8217;s use the  <code>split</code> method of <code>String</code>. It takes in <strong>one argument</strong>: the string that you want to divide the invoking string by. It <strong>returns:</strong> an array of elements from that divided string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;hello world, I am 42 years old&quot;</span>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">split</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;hello&quot;, &quot;world,&quot;, &quot;I&quot;, &quot;am&quot;, &quot;42&quot;, &quot;years&quot;, &quot;old&quot;] </span>
</span><span class='line'><span class="nb">puts</span> <span class="n">arr</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'><span class="c1"># =&gt; 7</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The backslash and newline character</h3>

<p>To get an array of Congressmember Twitter names, we need to split the sample text file by whatever character is used to create a <strong>newline</strong>, i.e. the thing that happens when we press <strong>Enter</strong>.</p>

<p>This is the <strong>newline</strong> character: <code>"\n"</code></p>

<p>In Ruby strings, newlines are just characters. That <strong>backslash</strong> &ndash; <code>\n</code> &ndash; before the <code>n</code> &ndash; has a special meaning in Ruby (and other programming languages).</p>

<p>The backslash acts as an <strong>escape character</strong>, and it affects the character that immediately follows it. In this case, this is the letter <code>n</code>.</p>

<p>In other words, <code>\n</code> is not just a normal, literal <code>n</code> character, but the symbol for a <strong>newline</strong>, i.e. a line break.</p>

<p>So, write the code to:</p>

<ol>
<li>Download from the URL <a href="http://nottwitter.danwin.com/simple-congress-list.txt">at this link</a></li>
<li>Separate it into an array</li>
<li>Loop through the array, printing out an uppercase version of each string:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://nottwitter.danwin.com/simple-congress-list.txt&quot;</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">name</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># JOEBIDEN</span>
</span><span class='line'><span class="c1"># ROYBLUNT</span>
</span><span class='line'><span class="c1"># SENATORBOXER</span>
</span><span class='line'><span class="c1"># CHUCKGRASSLEY</span>
</span><span class='line'><span class="c1"># DARRELLISSA</span>
</span><span class='line'><span class="c1"># JOELIEBERMAN</span>
</span><span class='line'><span class="c1"># REPRONPAUL</span>
</span><span class='line'><span class="c1"># JAREDPOLIS</span>
</span><span class='line'><span class="c1"># SENRANDPAUL</span>
</span><span class='line'><span class="c1"># NANCYPELOSI</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Exercise</h2>

<p>Obviously, we don&#8217;t want just the names in uppercase, we want to <em>do</em> something. Why don&#8217;t we combine the power of this loop with some of the functionality from last chapter&#8217;s loops?</p>

<p>Once you&#8217;ve gathered the names in the list, loop through the list and print the <code>created_at</code> and <code>text</code>  of the <em>latest</em> tweet from each of the Twitter accounts.</p>

<p>(Twitter spits out the tweets in reverse chronological order. So for our purposes, this would be the <em>first</em> tweet in an array).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">list_url</span> <span class="o">=</span> <span class="s2">&quot;http://nottwitter.danwin.com/simple-congress-list.txt&quot;</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">list_url</span><span class="p">)</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'><span class="n">arr_of_names</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">tweets_json_url_pattern</span> <span class="o">=</span> <span class="s2">&quot;http://nottwitter.danwin.com/statuses/_SCREENNAME_/1/user_timeline.json&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">arr_of_names</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tweets_json_url</span> <span class="o">=</span> <span class="n">tweets_json_url_pattern</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;_SCREENNAME_&quot;</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">tweets_json</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">tweet_json_url</span><span class="p">)</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'>  <span class="n">tweets_arr</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">tweets_json</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1"># just need the first tweet</span>
</span><span class='line'>  <span class="n">tweet</span> <span class="o">=</span> <span class="n">tweets_arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">name</span> <span class="o">+</span> <span class="s2">&quot; tweeted on &quot;</span> <span class="o">+</span> <span class="n">tweet</span><span class="o">[</span><span class="s1">&#39;created_at&#39;</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;: &quot;</span> <span class="o">+</span> <span class="n">tweet</span><span class="o">[</span><span class="err">&#39;</span><span class="n">text</span><span class="o">]</span>
</span><span class='line'>  
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loop and repeat]]></title>
    <link href="http://learnwhytocode.github.com/lessons/loop-and-repeat/"/>
    <updated>2012-09-12T03:06:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/loop-and-repeat</id>
    <content type="html"><![CDATA[<h2>Find a simple step</h2>

<h2>Repeat that step across a collection</h2>

<h2>Exercise</h2>

<p>Print out every tweet</p>

<hr />

<p>old
Now that we have a nice routine for downloading and saving a file, let&#8217;s use it to retrieve the first three pages of tweets from the user named <code>joebiden</code>.</p>

<p>Here again is the URL pattern for tweet pages in our tutorial:
<code>http://TK_DATA_ROOT_PATH/statuses/_USER_NAME/_PAGENUM_/user_timeline.json</code></p>

<p>Now to download them using our pre-written methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">load</span> <span class="s1">&#39;./my-first-methods.rb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">url_pattern</span> <span class="o">=</span> <span class="s2">&quot;http://TK_DATA_ROOT_PATH/statuses/_USER_NAME/_PAGENUM_/user_timeline.json&quot;</span>
</span><span class='line'><span class="n">screen_name</span> <span class="o">=</span> <span class="s2">&quot;joebiden&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">url_1</span> <span class="o">=</span> <span class="n">url_pattern</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;_USER_NAME_&quot;</span><span class="p">,</span> <span class="n">screen_name</span><span class="p">)</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;_PAGENUM_&quot;</span><span class="p">,</span> <span class="s1">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">download_and_save</span><span class="p">(</span><span class="n">url_1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">url_2</span> <span class="o">=</span> <span class="n">url_pattern</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;_USER_NAME_&quot;</span><span class="p">,</span> <span class="n">screen_name</span><span class="p">)</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;_PAGENUM_&quot;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">download_and_save</span><span class="p">(</span><span class="n">url_2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">url_3</span> <span class="o">=</span> <span class="n">url_pattern</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;_USER_NAME_&quot;</span><span class="p">,</span> <span class="n">screen_name</span><span class="p">)</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;_PAGENUM_&quot;</span><span class="p">,</span> <span class="s1">&#39;3&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">download_and_save</span><span class="p">(</span><span class="n">url_3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s not a terrible amount of work to download three pages. But in our continuing quest to remove repetition, let&#8217;s find a way to exploit the obvious pattern above.</p>

<h2>Loop with each</h2>

<p><strong>Note:</strong> Ruby, like its peer languages, has the <code>for</code> construct. We&#8217;re going to skip that and use the more Ruby idiomatic <code>each</code> just for the sake of brevity.</p>

<p>Let&#8217;s simplify the issue here: how do we count from <code>1</code> to <code>3</code>? In a programmatic way?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">num</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The object <code>1..3</code> is a special data class in Ruby called a <code>Range</code>. Ranges are one of several types of <strong>collections</strong>. After we learn about the other kinds of collections, we won&#8217;t be using ranges too often. But they make for an easy introduction to loops.</p>

<p>Collections have a method called <code>each</code>, which, as we saw above, iterates through each member of a collection. The <code>do</code> and <code>end</code> keywords denote the block of code performed in each iteration. And think of the <code>|num|</code> as the <strong>argument</strong> passed into that block of code.</p>

<p>Let&#8217;s practice. Using a <code>Range</code> and the <code>each</code> method, print out the URLs needed to retrieve the three <code>joebiden</code> tweet pages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">biden_pattern</span> <span class="o">=</span> <span class="s2">&quot;http://TK_DATA_ROOT_PATH/statuses/joe_biden/_PAGENUM_/user_timeline.json&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">page_num</span><span class="o">|</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="n">biden_pattern</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;_PAGENUM_&quot;</span><span class="p">,</span> <span class="n">page_num</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">url</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Up until now, we&#8217;ve basically been <em>entering</em> code equivalent to the amount of work that we actually want to do. With loops, you can see how actions can be repeated dozens, thousands, millions of times with a simple change to a collection.</p>

<h5>Exercise</h5>

<p>Revisit the problem we attempted at the beginning of the chapter &ndash; downloading 3 pages of <code>joebiden</code> tweets &ndash; but use a <code>Range</code> and the <code>each</code> method.</p>

<h5>Answer</h5>

<figure class='code'><figcaption><span> (answer.rb)</span> <a href='http://learnwhytocode.github.com/downloads/code/loop-and-repeat/answer.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">load</span> <span class="s1">&#39;./my-first-methods.rb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">url_pattern</span> <span class="o">=</span> <span class="s2">&quot;http://TK_DATA_ROOT_PATH/statuses/_USER_NAME/_PAGENUM_/user_timeline.json&quot;</span>
</span><span class='line'><span class="n">screen_name</span> <span class="o">=</span> <span class="s2">&quot;joebiden&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">page_num</span><span class="o">|</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="n">url_pattern</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;_USER_NAME_&quot;</span><span class="p">,</span> <span class="n">screen_name</span><span class="p">)</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;_PAGENUM_&quot;</span><span class="p">,</span> <span class="n">page_num</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class='line'>  <span class="n">download_and_save</span><span class="p">(</span><span class="n">url_1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pick out the text from many tweets]]></title>
    <link href="http://learnwhytocode.github.com/lessons/collect-text-from-many-tweets/"/>
    <updated>2012-09-12T03:05:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/collect-text-from-many-tweets</id>
    <content type="html"><![CDATA[<p>Open the JSON file for tweets</p>

<p>Addressing each tweet</p>

<p>Combine with hash notation</p>

<h5>Exercise</h5>

<p>get date of the 48th tweet
get text of the 48th tweet</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pick out the text of a tweet]]></title>
    <link href="http://learnwhytocode.github.com/lessons/pick-out-the-text-from-a-tweet/"/>
    <updated>2012-09-12T03:03:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/pick-out-the-text-from-a-tweet</id>
    <content type="html"><![CDATA[<p>Let&#8217;s re-run the code to get Twitter account information:</p>

<p>What is the class of the parsed JSON?</p>

<h2>The Hash object</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Labeling the data]]></title>
    <link href="http://learnwhytocode.github.com/lessons/labeling-the-data/"/>
    <updated>2012-09-12T03:01:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/labeling-the-data</id>
    <content type="html"><![CDATA[<p>We&#8217;ve seen how the URLs for pulling in Twitter information have a pattern. For example, the user info URLs for 4 different users looks like this:</p>

<p><code>http://TK_DATA_ROOT_PATH/users/TKBohner/show.json</code>
<code>http://TK_DATA_ROOT_PATH/users/TKPelosi/show.json</code>
<code>http://TK_DATA_ROOT_PATH/users/TKrandpaul/show.json</code>
<code>http://TK_DATA_ROOT_PATH/users/TKRepPaulRyan/show.json</code></p>

<p>Everything about the URLs, except the account name, is the same. Using <strong>variables</strong>, we can store the repetitive parts of the strings for repeated references:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.9.3p258 :015 &gt; base_twit_url = "http://TK_DATA_ROOT_PATH/users/"
</span><span class='line'> =&gt; "http://TK_DATA_ROOT_PATH/users/" 
</span><span class='line'>1.9.3p258 :016 &gt; end_twit_url = "/show.json"
</span><span class='line'> =&gt; "/show.json" 
</span><span class='line'>
</span><span class='line'>1.9.3p258 :017 &gt; base_twit_url + "TKBohner" + end_twit_url
</span><span class='line'> =&gt; "http://TK_DATA_ROOT_PATH/users/TKBohner/show.json" 
</span><span class='line'>1.9.3p258 :018 &gt; base_twit_url + "TKPelosi" + end_twit_url
</span><span class='line'> =&gt; "http://TK_DATA_ROOT_PATH/users/TKPelosi/show.json"</span></code></pre></td></tr></table></div></figure>


<h2>Labels for data</h2>

<p>After learning about strings, your first thought may be: <em>Hey, why aren&#8217;t those non-quoted strings causing errors? Does the Ruby language reserve a word called <code>base_twit_url</code>?</em></p>

<p>In the above example, the <code>base_twit_url</code> is neither a string (because it&#8217;s not set off by quotes) nor a reference to a Ruby command. Instead, it is a Ruby <strong>variable</strong>; it is also called a <strong>pointer</strong>, because it <em>points</em> to something.</p>

<p>What does <code>base_twit_url</code> <em>point</em> to? The string, <code>"http://TK_DATA_ROOT_PATH/users/"</code></p>

<p>How does the the Ruby interpreter know that <code>base_twit_url</code> refers to that string? Because we used the <strong>assignment operator</strong> &ndash; the equals sign,  <code>=</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.9.3p258 :015 &gt; base_twit_url = "http://TK_DATA_ROOT_PATH/users/"</span></code></pre></td></tr></table></div></figure>


<p>After that <strong>assignment</strong>, Ruby knows that we are using <code>base_twit_url</code> as a stand-in for the longer string.</p>

<p>Think of variables as a way of <em>labeling</em> objects, as if to say, <em>I&#8217;m giving this here data object the nickname of <code>my_string</code></em></p>

<h3>Variable naming</h3>

<p>How did Ruby know that <code>base_twit_url</code> was going to be a proper variable, rather than erroneous input (as is the case if you type in a URL at the irb prompt)?</p>

<p>The Ruby interpreter recognizes sequences of <strong>alphanumeric characters and underscores</strong>, as variables.</p>

<p>So, these are <em>not</em> variable names:</p>

<ul>
<li><code>hey-you</code> (hyphens are not alphanumeric, though the underscore character is allowed)</li>
<li><code>hey!</code> (exclamation marks are not alphanumeric)</li>
<li><code>hello world</code> (spaces aren&#8217;t allowed)</li>
<li><code>100var</code> (you can&#8217;t begin a variable with a number)</li>
</ul>


<p>Here are proper variables:</p>

<ul>
<li><code>hey_you</code></li>
<li><code>HEY</code></li>
<li><code>helloWorld</code></li>
<li><code>var100</code></li>
<li><code>x</code></li>
<li><code>super_cali_fragilistic_expealidocious</code></li>
</ul>


<p>In Ruby, and in other language, variables that begin with uppercase letters (or are <em>all</em> uppercase) have a special meaning. To keep things simple for now, just stick to using alphabetical and underscore characters (I would try to avoid using numbers, because they can be confusing).</p>

<h3>Variable assignment</h3>

<p>It&#8217;s still not clear how Ruby distinguishes between a word like <code>puts</code> and some variable we just made up, such as <code>puts_this_in_your_pipe</code>. Try entering both into <strong>irb</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.9.3p258 :001 &gt; puts
</span><span class='line'>
</span><span class='line'> =&gt; nil 
</span><span class='line'>1.9.3p258 :002 &gt; puts_this_in_your_pipe
</span><span class='line'>NameError: undefined local variable or method `puts_this_in_your_pipe' for main:Object</span></code></pre></td></tr></table></div></figure>


<p>What happened here? The Ruby interpreter didn&#8217;t choke on <code>puts</code> because <em>somewhere</em>, somehow, <code>puts</code> was defined.</p>

<p>However, the word <code>puts_this_in_your_pipe</code> apparently was <em>not</em> defined; hence, the complaint about a <code>undefined local variable or method</code>.</p>

<p>The most common way to tell Ruby that &#8221;<em>this here word I&#8217;ve made up is meant to be a variable</em>&#8221; is to <em>assign</em> it a value using the <em>assignment operator</em>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.9.3p258 :003 &gt; puts_this_in_your_pipe = 'water'
</span><span class='line'> =&gt; "water" 
</span><span class='line'>1.9.3p258 :004 &gt; puts_this_in_your_pipe
</span><span class='line'> =&gt; "water" </span></code></pre></td></tr></table></div></figure>


<p>The Ruby interpreter doesn&#8217;t throw an error here because we&#8217;ve defined the <code>puts_this_in_your_pipe</code> variable.</p>

<h5>Exercises</h5>

<p>(todo) What do we name our variables?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handle JSON files]]></title>
    <link href="http://learnwhytocode.github.com/lessons/handle-json-files/"/>
    <updated>2012-09-12T03:01:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/handle-json-files</id>
    <content type="html"><![CDATA[<p>In the last chapter, we learned how to download a file using HTTParty and save its contents to a variable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'rubygems'
</span><span class='line'>require 'HTTParty'
</span><span class='line'>
</span><span class='line'>url = "http://nottwitter.danwin.com/users/NancyPelosi/show.json"
</span><span class='line'>downloaded_file = HTTParty.get(url)
</span></code></pre></td></tr></table></div></figure>


<p>But when we examine the results (you can visit the <a href="http://nottwitter.danwin.com/users/NancyPelosi/show.json">show.json file in your browser</a>), you&#8217;ll find a strange arrangement of text:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "id": 15764644,
</span><span class='line'>  "id_str": "15764644",
</span><span class='line'>  "name": "Nancy Pelosi",
</span><span class='line'>  "screen_name": "NancyPelosi",
</span><span class='line'>  "location": "San Francisco & DC",
</span><span class='line'>  "url": "http://www.democraticleader.gov/",
</span><span class='line'>  "description": "Democratic Leader, focused on strengthening America's middle class and creating jobs; mother, grandmother, dark chocolate connoisseur.",
</span><span class='line'>  "protected": false,
</span><span class='line'>  "followers_count": 226259,
</span><span class='line'>  "friends_count": 225,
</span><span class='line'>  "listed_count": 6288,
</span><span class='line'>  "created_at": "Thu Aug 07 15:35:02 +0000 2008",
</span><span class='line'>  "favourites_count": 0,
</span><span class='line'>  "utc_offset": -28800,
</span><span class='line'>  "time_zone": "Pacific Time (US & Canada)",
</span><span class='line'>  "geo_enabled": false,
</span><span class='line'>  "verified": true,
</span><span class='line'>  "statuses_count": 1029,
</span><span class='line'>  "lang": "en",
</span><span class='line'>  "contributors_enabled": false,
</span><span class='line'>  "is_translator": false,
</span><span class='line'>  "profile_background_color": "FFFFFF",
</span><span class='line'>  "profile_background_image_url": "http://a0.twimg.com/profile_background_images/188759788/newtwitterbg.jpg",
</span><span class='line'>  "profile_background_image_url_https": "https://si0.twimg.com/profile_background_images/188759788/newtwitterbg.jpg",
</span><span class='line'>  "profile_background_tile": false,
</span><span class='line'>  "profile_image_url": "http://a0.twimg.com/profile_images/1681806248/npmic4twitter_normal.jpg",
</span><span class='line'>  "profile_image_url_https": "https://si0.twimg.com/profile_images/1681806248/npmic4twitter_normal.jpg",
</span><span class='line'>  "profile_link_color": "1B5363",
</span><span class='line'>  "profile_sidebar_border_color": "E8E8E8",
</span><span class='line'>  "profile_sidebar_fill_color": "FCFCFC",
</span><span class='line'>  "profile_text_color": "333333",
</span><span class='line'>  "profile_use_background_image": true,
</span><span class='line'>  "show_all_inline_media": false,
</span><span class='line'>  "default_profile": false,
</span><span class='line'>  "default_profile_image": false,
</span><span class='line'>  "following": null,
</span><span class='line'>  "follow_request_sent": null,
</span><span class='line'>  "notifications": null
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>At second glance, it&#8217;s not too hard to figure out what&#8217;s going on here. This <strong>json</strong> file contains some kind of listing of attributes for Rep. Nancy Pelosi&#8217;s Twitter account. For example:</p>

<p><code>"followers_count": 226259</code></p>

<p>We can guess that this line indicates that Rep. Pelosi has 226,259 followers.</p>

<h2>What is JSON?</h2>

<p>JSON stands for &#8221;<a href="http://en.wikipedia.org/wiki/JSON">JavaScript Object Notation</a>&#8221;. It is simply a lightweight data format and is a common way for web services to pass around data.</p>

<p>The actual details of JSON&#8217;s structure aren&#8217;t important to learn right now. We just want to know: how can we turn this text file to usable data?</p>

<p>If you&#8217;re following the steps from the beginning of this chapter, you have a <code>downloaded_file</code> variable that contains downloaded JSON. Exactly what is contained in <code>downloaded_file</code>?</p>

<p>(remember that <code>downloaded_file</code> is actually an object with a class of HTTParty::Response, so use its <code>body</code> method)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.9.3p258 :006 &gt; downloaded_file.body.class
</span><span class='line'> =&gt; String </span></code></pre></td></tr></table></div></figure>


<h2>Data is organized text</h2>

<p>As you get more experienced in collecting digital data, one <em>fundamental concept</em> to understand is that data is all just text (actually <code>1</code>s and <code>0s</code> but no need to go that deep).</p>

<p>The JSON file we just downloaded is just a large string.</p>

<p>Getting useful data out of this text &ndash; whether it&#8217;s comma-delimited files, Excel spreadsheets, JSON, or SQL &ndash; is just a matter of finding a pattern in the file and breaking it apart.</p>

<p>We&#8217;ll figure out this pattern later. For now, let&#8217;s see if someone has already written the code to interpret JSON files for us.</p>

<h2>The json gem</h2>

<p>(TK parse exercise)</p>

<h2>Write our own methods</h2>

<h5>Exercise</h5>

<p>Write a <code>download_and_parse_json</code> method that, given a url to a json file, returns the result of <code>JSON.parse</code>.</p>

<h5>Answer</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to download a file]]></title>
    <link href="http://learnwhytocode.github.com/lessons/how-to-download-a-file/"/>
    <updated>2012-09-12T02:10:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/how-to-download-a-file</id>
    <content type="html"><![CDATA[<p>So we&#8217;ve learned how to input URLs in the Ruby interpreter. But how do we actually <em>download</em> something?</p>

<p>In the last chapter, we learned about how variables can <em>point</em> to data objects, such as strings. But there are also pointers to blocks of code that actually <em>do</em> something, such as <strong>methods</strong>.</p>

<p>In fact, <code>puts</code> is a method. And there are many other methods which can do much more than print to screen. Much of the power of programming is being able to hugely complex operations by invoking a single word &ndash; the name of a method.</p>

<p>So to download a file, all we need to do is find the name of the method that contains the downloading functionality.</p>

<h3>It&#8217;s a HTTParty</h3>

<p>Doing a few Google searches for &#8220;Ruby&#8221; and &#8220;download TK&#8221; will net us a few options. The most fun-sounding one is John Nunemaker&#8217;s <a href="https://github.com/jnunemaker/httparty">HTTParty</a> gem, which claims to make &#8220;http fun again!&#8221;</p>

<div class="note">
If you haven&#8217;t installed Rubygems yet or the HTTParty gem, refer back to the <a href="TK">installation chapter</a>. 
</div>


<p>According to the <a href="https://github.com/jnunemaker/httparty#readme">documentation</a>, here&#8217;s how to download from a URL:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'rubygems'
</span><span class='line'>require 'httparty'
</span><span class='line'>response = HTTParty.get('http://learnwhytocode.danwin.com')
</span><span class='line'>puts response
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s dissect this code snippet.</p>

<h4>The &#8216;require&#8217; statement</h4>

<p>The Ruby keyword <code>require</code> is a <strong>method</strong> that, when given a <strong>string</strong>, pulls in the library of code that that string refers to.</p>

<p>The first <code>require</code> call tells the Ruby interpreter that we&#8217;ll be using <strong>rubygems</strong>, Ruby&#8217;s convenient framework of packaging these libraries.</p>

<p>The second <code>require</code> call pulls in the code for the <a href="https://github.com/jnunemaker/httparty">HTTParty</a> gem. By convention, the actual strings used to refer to the gem use lowercase letters, underscores, and sometimes hyphens (In the case of HTTParty, you <em>can</em> refer to it as <code>require "HTTParty"</code>).</p>

<p>In irb, you should see this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.9.3p258 :002 &gt; require 'rubygems'
</span><span class='line'> =&gt; false 
</span><span class='line'>1.9.3p258 :003 &gt; require 'httparty'
</span><span class='line'> =&gt; true</span></code></pre></td></tr></table></div></figure>


<h3>The &#8216;get&#8217; method</h3>

<p>This next line is where the interesting work is done:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>response = HTTParty.get('http://learnwhytocode.danwin.com')</span></code></pre></td></tr></table></div></figure>


<p>First, focus on what&#8217;s to the <em>right</em> of the <strong>equals sign</strong> (which we learned is the <strong>assignment operator</strong>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTParty.get('http://learnwhytocode.danwin.com')</span></code></pre></td></tr></table></div></figure>


<p>Following the <code>get</code> is a <strong>string</strong>, wrapped in <strong>parentheses</strong>. These parentheses denote the <strong>arguments</strong> for the <code>get</code> method. I&#8217;ll explain <strong>arguments</strong> later.</p>

<p><em>The parentheses are actually optional, but let&#8217;s pretend that they need to be there for now.</em></p>

<p><strong>To review:</strong></p>

<p>To download a file from <code>"http://learnwhytocode.danwin.com"</code>, we call this method:</p>

<p><code>HTTParty.get("http://learnwhytocode.danwin.com")</code></p>

<ul>
<li><code>HTTParty</code> is the <strong>object</strong></li>
<li><code>get</code> is a <strong>method</strong> of <code>HTTParty</code></li>
<li>and the string <code>"http://learnwhytocode.danwin.com"</code> is an <strong>argument</strong> that we pass to the <code>get</code> <strong>method</strong></li>
</ul>


<p>Why is the object named <code>HTTParty</code> and its method <code>get</code>? Because the author wanted it that way. What is the code behind <code>get</code>? You can examine it later on your own, as the author <a href="https://github.com/jnunemaker/httparty">has generously made it open source</a>, but let&#8217;s be content for now that it works as the author claims in the documentation.</p>

<h3>Variables, revisited</h3>

<p>Let&#8217;s go back to the original code that contained the variable assignment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>response = HTTParty.get('http://learnwhytocode.danwin.com')</span></code></pre></td></tr></table></div></figure>


<p>The variable named <code>response</code> contains the return value of the <code>get</code> method.</p>

<p>What does <code>response</code> contain? Let&#8217;s try it out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">head</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">head</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">head</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;http://learnwhytocode.danwin.com&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;HTTParty::Response:0x103877b30 parsed_response=&quot;\n...&quot;&gt;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">head</span> <span class="p">:</span><span class="mo">004</span> <span class="o">&gt;</span> <span class="n">response</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">HTTParty</span><span class="o">::</span><span class="no">Response</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: you only have to do the <code>require</code> statements once each time you startup irb. If you exit and re-launch irb, you&#8217;ll have to call <code>require</code> again to bring in the libraries</em></p>

<p>If you look through the <a href="https://github.com/jnunemaker/httparty">HTTParty documentation</a>, you&#8217;ll find that the <code>body</code> method of this <code>HTTParty::Response</code> class contains the contents of the webpage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">head</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="nb">String</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">head</span> <span class="p">:</span><span class="mo">006</span> <span class="o">&gt;</span> <span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">7551</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all there is to downloading a file. If you look through the <a href="https://github.com/jnunemaker/httparty">HTTParty documentation</a>, you&#8217;ll see that it&#8217;s actually a complicated affair. But thanks to the nature of programming and how it abstracts complexity to a single word, we just need to know how to invoke <code>HTTParty.get</code></p>

<p>We&#8217;ll find out what to do with the result of <code>HTTParty.get</code> in the next chapter.</p>

<h5>Exercises</h5>

<p>Use the <code>HTTParty</code> library to download this URL: <code>TK</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Methods and the dot operator]]></title>
    <link href="http://learnwhytocode.github.com/lessons/methods-and-the-dot-operator/"/>
    <updated>2012-09-12T02:05:00-04:00</updated>
    <id>http://learnwhytocode.github.com/lessons/methods-and-the-dot-operator</id>
    <content type="html"><![CDATA[<p>This chapter &ndash; and this entire tutorial, actually &ndash; tip-toes around the topic of <a href="http://en.wikipedia.org/wiki/Object-oriented_programming">object-oriented programming</a>.</p>

<p>In Ruby, everything is considered an &#8220;object&#8221;. We&#8217;ve encountered at least two different objects: <code>String</code> and <code>Fixnum</code>.</p>

<p>In the last chapter, we saw how they don&#8217;t add together so easily:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p258</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="s2">&quot;two&quot;</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="no">TypeError</span><span class="p">:</span> <span class="n">can</span><span class="s1">&#39;t convert Fixnum into String</span>
</span><span class='line'><span class="s1"> from (irb#1):1:in `+&#39;</span>
</span><span class='line'>  <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="c1">#1):1</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p258</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="s2">&quot;2&quot;</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="no">TypeError</span><span class="p">:</span> <span class="n">can</span><span class="s1">&#39;t convert Fixnum into String</span>
</span><span class='line'><span class="s1"> from (irb#1):2:in `+&#39;</span>
</span><span class='line'>  <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="c1">#1):2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just so we don&#8217;t run into this <code>TypeError</code> problem again, how <em>do</em> we tell objects apart?</p>

<h2>The dot operator</h2>

<p>Try these commands in <strong>irb</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="s2">&quot;1&quot;</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="s2">&quot;one&quot;</span><span class="o">.</span><span class="n">class</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should see something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p258</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Fixnum</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p258</span> <span class="p">:</span><span class="mo">004</span> <span class="o">&gt;</span> <span class="s2">&quot;1&quot;</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="nb">String</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p258</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="s2">&quot;one&quot;</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="nb">String</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we say that <code>1</code> is an <strong>object</strong>, we mean that it has <em>properties and methods</em>. In the example above, we accessed the <code>class</code> <strong>method</strong> of the <code>1</code> and <code>"1"</code> objects.</p>

<p>Think of <code>class</code> as the <strong>type</strong> of an object.</p>

<p>Take special note of the role of the period above. This is the <strong>dot operator</strong> (i.e. the period). That dot is a Ruby symbol used to invoke a method. In the above example, the <strong>dot operator</strong> is used to invoke the <code>class</code> <strong>method</strong> of the <strong>object</strong>, <code>1</code>.</p>

<h2>Methods</h2>

<p>There are many more methods than just <code>class</code>. And methods are how we will accomplish some very useful tasks despite not doing much programming ourselves.</p>

<p>Every <code>class</code> of object has its own methods.</p>

<p>For example, the <code>length</code> method returns the number of characters in the invoking string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p258</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="s2">&quot;supercalifragilistic&quot;</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">20</span>
</span></code></pre></td></tr></table></div></figure>


<p>But the <code>length</code> method does not exist for numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p258</span> <span class="p">:</span><span class="mo">006</span> <span class="o">&gt;</span> <span class="mi">42</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'><span class="no">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`length&#39; for 42:Fixnum</span>
</span><span class='line'><span class="sb"> from (irb#1):6</span>
</span></code></pre></td></tr></table></div></figure>


<p>Methods <strong>return</strong> a value. This means you can <strong>chain</strong> together methods. Let&#8217;s find out type of object string&#8217;s <code>length</code> method returns by invoking the <code>class</code> method like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p258</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="s2">&quot;http://www.nytimes.com&quot;</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Fixnum</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the result is a <code>Fixnum</code> (i.e. a number), then this is possible:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p258</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span> <span class="s2">&quot;supercalifragilistic&quot;</span><span class="o">.</span><span class="n">length</span> <span class="o">+</span> <span class="s2">&quot;http://www.nytimes.com&quot;</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conversion methods</h3>

<p>Here&#8217;s one method that will be particularly useful to us: the <code>to_s</code> method, which converts its invoking object to a <em>string</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p258</span> <span class="p">:</span><span class="mo">011</span> <span class="o">&gt;</span> <span class="s2">&quot;10&quot;</span> <span class="o">+</span> <span class="mi">20</span>
</span><span class='line'><span class="no">TypeError</span><span class="p">:</span> <span class="n">can</span><span class="s1">&#39;t convert Fixnum into String</span>
</span><span class='line'><span class="s1"> from (irb#1):11:in `+&#39;</span>
</span><span class='line'>  <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="c1">#1):11</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p258</span> <span class="p">:</span><span class="mo">012</span> <span class="o">&gt;</span> <span class="s2">&quot;10&quot;</span> <span class="o">+</span> <span class="mi">20</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;1020&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s also a <code>to_i</code> method (the <code>i</code> stands for <em>integer</em>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p258</span> <span class="p">:</span><span class="mo">013</span> <span class="o">&gt;</span> <span class="s2">&quot;10&quot;</span><span class="o">.</span><span class="n">to_i</span> <span class="o">+</span> <span class="s2">&quot;20&quot;</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">30</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll be using many more methods in the chapters to come. The main takeaways are these:</p>

<ol>
<li>Every data type (i.e. <strong>class</strong>) has its own methods</li>
<li>Methods <strong>return</strong> a value</li>
<li>If you&#8217;re unsure of what a value&#8217;s datatype is, use its <code>class</code> method to find out.</li>
</ol>


<p>How do we know what methods exist? It&#8217;s a mix of looking up documentation and eventually memorizing the ones most helpful to you. Luckily, this is just a web search away for most methods.</p>

<h5>Exercises:</h5>

<p>What is the <code>class</code> of <code>42.2</code>?</p>

<p>What is the resulting <code>class</code> of: <code>100 + 42.2</code> ?</p>

<p>Use addition and a conversion method to join these objects:  <code>"http://TK_DATA_ROOT_PATH/"</code>, <code>TKissa</code>, <code>"/"</code>, <code>2</code>, <code>"/"</code>, <code>"user_timeline.json"</code></p>

<p>Check out Ruby&#8217;s <a href="http://www.ruby-doc.org/core-1.9.3/String.html" title="Class: String (Ruby 1.9.3)">documentation of the String class</a> for more <code>String</code> methods. See if you can find the method that replaces characters in a string with other characters.</p>
]]></content>
  </entry>
  
</feed>
